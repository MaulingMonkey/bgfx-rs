/* automatically generated by rust-bindgen */

pub const BGFX_SHARED_LIB_BUILD: u32 = 0;
pub const BGFX_SHARED_LIB_USE: u32 = 0;
pub const BGFX_STATE_DEPTH_TEST_SHIFT: u32 = 4;
pub const BGFX_STATE_BLEND_SHIFT: u32 = 12;
pub const BGFX_STATE_BLEND_EQUATION_SHIFT: u32 = 28;
pub const BGFX_STATE_CULL_SHIFT: u32 = 36;
pub const BGFX_STATE_ALPHA_REF_SHIFT: u32 = 40;
pub const BGFX_STATE_PT_SHIFT: u32 = 48;
pub const BGFX_STATE_POINT_SIZE_SHIFT: u32 = 52;
pub const BGFX_STATE_RESERVED_SHIFT: u32 = 61;
pub const BGFX_STENCIL_FUNC_REF_SHIFT: u32 = 0;
pub const BGFX_STENCIL_FUNC_RMASK_SHIFT: u32 = 8;
pub const BGFX_STENCIL_TEST_SHIFT: u32 = 16;
pub const BGFX_STENCIL_OP_FAIL_S_SHIFT: u32 = 20;
pub const BGFX_STENCIL_OP_FAIL_Z_SHIFT: u32 = 24;
pub const BGFX_STENCIL_OP_PASS_Z_SHIFT: u32 = 28;
pub const BGFX_BUFFER_COMPUTE_FORMAT_SHIFT: u32 = 0;
pub const BGFX_BUFFER_COMPUTE_TYPE_SHIFT: u32 = 4;
pub const BGFX_TEXTURE_RT_MSAA_SHIFT: u32 = 36;
pub const BGFX_TEXTURE_RT_SHIFT: u32 = 36;
pub const BGFX_SAMPLER_U_SHIFT: u32 = 0;
pub const BGFX_SAMPLER_V_SHIFT: u32 = 2;
pub const BGFX_SAMPLER_W_SHIFT: u32 = 4;
pub const BGFX_SAMPLER_MIN_SHIFT: u32 = 6;
pub const BGFX_SAMPLER_MAG_SHIFT: u32 = 8;
pub const BGFX_SAMPLER_MIP_SHIFT: u32 = 10;
pub const BGFX_SAMPLER_COMPARE_SHIFT: u32 = 16;
pub const BGFX_SAMPLER_BORDER_COLOR_SHIFT: u32 = 24;
pub const BGFX_SAMPLER_RESERVED_SHIFT: u32 = 28;
pub const BGFX_RESET_MSAA_SHIFT: u32 = 4;
pub const BGFX_RESET_FULLSCREEN_SHIFT: u32 = 0;
pub const BGFX_RESET_RESERVED_SHIFT: u32 = 31;
pub type va_list = *mut ::std::os::raw::c_char;
pub const BGFX_FATAL_DEBUG_CHECK: bgfx_fatal = 0;
pub const BGFX_FATAL_INVALID_SHADER: bgfx_fatal = 1;
pub const BGFX_FATAL_UNABLE_TO_INITIALIZE: bgfx_fatal = 2;
pub const BGFX_FATAL_UNABLE_TO_CREATE_TEXTURE: bgfx_fatal = 3;
pub const BGFX_FATAL_DEVICE_LOST: bgfx_fatal = 4;
pub const BGFX_FATAL_COUNT: bgfx_fatal = 5;
pub type bgfx_fatal = i32;
pub use self::bgfx_fatal as bgfx_fatal_t;
pub const BGFX_RENDERER_TYPE_NOOP: bgfx_renderer_type = 0;
pub const BGFX_RENDERER_TYPE_DIRECT3D9: bgfx_renderer_type = 1;
pub const BGFX_RENDERER_TYPE_DIRECT3D11: bgfx_renderer_type = 2;
pub const BGFX_RENDERER_TYPE_DIRECT3D12: bgfx_renderer_type = 3;
pub const BGFX_RENDERER_TYPE_GNM: bgfx_renderer_type = 4;
pub const BGFX_RENDERER_TYPE_METAL: bgfx_renderer_type = 5;
pub const BGFX_RENDERER_TYPE_NVN: bgfx_renderer_type = 6;
pub const BGFX_RENDERER_TYPE_OPENGLES: bgfx_renderer_type = 7;
pub const BGFX_RENDERER_TYPE_OPENGL: bgfx_renderer_type = 8;
pub const BGFX_RENDERER_TYPE_VULKAN: bgfx_renderer_type = 9;
pub const BGFX_RENDERER_TYPE_COUNT: bgfx_renderer_type = 10;
pub type bgfx_renderer_type = i32;
pub use self::bgfx_renderer_type as bgfx_renderer_type_t;
pub const BGFX_ACCESS_READ: bgfx_access = 0;
pub const BGFX_ACCESS_WRITE: bgfx_access = 1;
pub const BGFX_ACCESS_READWRITE: bgfx_access = 2;
pub const BGFX_ACCESS_COUNT: bgfx_access = 3;
pub type bgfx_access = i32;
pub use self::bgfx_access as bgfx_access_t;
pub const BGFX_ATTRIB_POSITION: bgfx_attrib = 0;
pub const BGFX_ATTRIB_NORMAL: bgfx_attrib = 1;
pub const BGFX_ATTRIB_TANGENT: bgfx_attrib = 2;
pub const BGFX_ATTRIB_BITANGENT: bgfx_attrib = 3;
pub const BGFX_ATTRIB_COLOR0: bgfx_attrib = 4;
pub const BGFX_ATTRIB_COLOR1: bgfx_attrib = 5;
pub const BGFX_ATTRIB_COLOR2: bgfx_attrib = 6;
pub const BGFX_ATTRIB_COLOR3: bgfx_attrib = 7;
pub const BGFX_ATTRIB_INDICES: bgfx_attrib = 8;
pub const BGFX_ATTRIB_WEIGHT: bgfx_attrib = 9;
pub const BGFX_ATTRIB_TEXCOORD0: bgfx_attrib = 10;
pub const BGFX_ATTRIB_TEXCOORD1: bgfx_attrib = 11;
pub const BGFX_ATTRIB_TEXCOORD2: bgfx_attrib = 12;
pub const BGFX_ATTRIB_TEXCOORD3: bgfx_attrib = 13;
pub const BGFX_ATTRIB_TEXCOORD4: bgfx_attrib = 14;
pub const BGFX_ATTRIB_TEXCOORD5: bgfx_attrib = 15;
pub const BGFX_ATTRIB_TEXCOORD6: bgfx_attrib = 16;
pub const BGFX_ATTRIB_TEXCOORD7: bgfx_attrib = 17;
pub const BGFX_ATTRIB_COUNT: bgfx_attrib = 18;
pub type bgfx_attrib = i32;
pub use self::bgfx_attrib as bgfx_attrib_t;
pub const BGFX_ATTRIB_TYPE_UINT8: bgfx_attrib_type = 0;
pub const BGFX_ATTRIB_TYPE_UINT10: bgfx_attrib_type = 1;
pub const BGFX_ATTRIB_TYPE_INT16: bgfx_attrib_type = 2;
pub const BGFX_ATTRIB_TYPE_HALF: bgfx_attrib_type = 3;
pub const BGFX_ATTRIB_TYPE_FLOAT: bgfx_attrib_type = 4;
pub const BGFX_ATTRIB_TYPE_COUNT: bgfx_attrib_type = 5;
pub type bgfx_attrib_type = i32;
pub use self::bgfx_attrib_type as bgfx_attrib_type_t;
pub const BGFX_TEXTURE_FORMAT_BC1: bgfx_texture_format = 0;
pub const BGFX_TEXTURE_FORMAT_BC2: bgfx_texture_format = 1;
pub const BGFX_TEXTURE_FORMAT_BC3: bgfx_texture_format = 2;
pub const BGFX_TEXTURE_FORMAT_BC4: bgfx_texture_format = 3;
pub const BGFX_TEXTURE_FORMAT_BC5: bgfx_texture_format = 4;
pub const BGFX_TEXTURE_FORMAT_BC6H: bgfx_texture_format = 5;
pub const BGFX_TEXTURE_FORMAT_BC7: bgfx_texture_format = 6;
pub const BGFX_TEXTURE_FORMAT_ETC1: bgfx_texture_format = 7;
pub const BGFX_TEXTURE_FORMAT_ETC2: bgfx_texture_format = 8;
pub const BGFX_TEXTURE_FORMAT_ETC2A: bgfx_texture_format = 9;
pub const BGFX_TEXTURE_FORMAT_ETC2A1: bgfx_texture_format = 10;
pub const BGFX_TEXTURE_FORMAT_PTC12: bgfx_texture_format = 11;
pub const BGFX_TEXTURE_FORMAT_PTC14: bgfx_texture_format = 12;
pub const BGFX_TEXTURE_FORMAT_PTC12A: bgfx_texture_format = 13;
pub const BGFX_TEXTURE_FORMAT_PTC14A: bgfx_texture_format = 14;
pub const BGFX_TEXTURE_FORMAT_PTC22: bgfx_texture_format = 15;
pub const BGFX_TEXTURE_FORMAT_PTC24: bgfx_texture_format = 16;
pub const BGFX_TEXTURE_FORMAT_ATC: bgfx_texture_format = 17;
pub const BGFX_TEXTURE_FORMAT_ATCE: bgfx_texture_format = 18;
pub const BGFX_TEXTURE_FORMAT_ATCI: bgfx_texture_format = 19;
pub const BGFX_TEXTURE_FORMAT_ASTC4X4: bgfx_texture_format = 20;
pub const BGFX_TEXTURE_FORMAT_ASTC5X5: bgfx_texture_format = 21;
pub const BGFX_TEXTURE_FORMAT_ASTC6X6: bgfx_texture_format = 22;
pub const BGFX_TEXTURE_FORMAT_ASTC8X5: bgfx_texture_format = 23;
pub const BGFX_TEXTURE_FORMAT_ASTC8X6: bgfx_texture_format = 24;
pub const BGFX_TEXTURE_FORMAT_ASTC10X5: bgfx_texture_format = 25;
pub const BGFX_TEXTURE_FORMAT_UNKNOWN: bgfx_texture_format = 26;
pub const BGFX_TEXTURE_FORMAT_R1: bgfx_texture_format = 27;
pub const BGFX_TEXTURE_FORMAT_A8: bgfx_texture_format = 28;
pub const BGFX_TEXTURE_FORMAT_R8: bgfx_texture_format = 29;
pub const BGFX_TEXTURE_FORMAT_R8I: bgfx_texture_format = 30;
pub const BGFX_TEXTURE_FORMAT_R8U: bgfx_texture_format = 31;
pub const BGFX_TEXTURE_FORMAT_R8S: bgfx_texture_format = 32;
pub const BGFX_TEXTURE_FORMAT_R16: bgfx_texture_format = 33;
pub const BGFX_TEXTURE_FORMAT_R16I: bgfx_texture_format = 34;
pub const BGFX_TEXTURE_FORMAT_R16U: bgfx_texture_format = 35;
pub const BGFX_TEXTURE_FORMAT_R16F: bgfx_texture_format = 36;
pub const BGFX_TEXTURE_FORMAT_R16S: bgfx_texture_format = 37;
pub const BGFX_TEXTURE_FORMAT_R32I: bgfx_texture_format = 38;
pub const BGFX_TEXTURE_FORMAT_R32U: bgfx_texture_format = 39;
pub const BGFX_TEXTURE_FORMAT_R32F: bgfx_texture_format = 40;
pub const BGFX_TEXTURE_FORMAT_RG8: bgfx_texture_format = 41;
pub const BGFX_TEXTURE_FORMAT_RG8I: bgfx_texture_format = 42;
pub const BGFX_TEXTURE_FORMAT_RG8U: bgfx_texture_format = 43;
pub const BGFX_TEXTURE_FORMAT_RG8S: bgfx_texture_format = 44;
pub const BGFX_TEXTURE_FORMAT_RG16: bgfx_texture_format = 45;
pub const BGFX_TEXTURE_FORMAT_RG16I: bgfx_texture_format = 46;
pub const BGFX_TEXTURE_FORMAT_RG16U: bgfx_texture_format = 47;
pub const BGFX_TEXTURE_FORMAT_RG16F: bgfx_texture_format = 48;
pub const BGFX_TEXTURE_FORMAT_RG16S: bgfx_texture_format = 49;
pub const BGFX_TEXTURE_FORMAT_RG32I: bgfx_texture_format = 50;
pub const BGFX_TEXTURE_FORMAT_RG32U: bgfx_texture_format = 51;
pub const BGFX_TEXTURE_FORMAT_RG32F: bgfx_texture_format = 52;
pub const BGFX_TEXTURE_FORMAT_RGB8: bgfx_texture_format = 53;
pub const BGFX_TEXTURE_FORMAT_RGB8I: bgfx_texture_format = 54;
pub const BGFX_TEXTURE_FORMAT_RGB8U: bgfx_texture_format = 55;
pub const BGFX_TEXTURE_FORMAT_RGB8S: bgfx_texture_format = 56;
pub const BGFX_TEXTURE_FORMAT_RGB9E5F: bgfx_texture_format = 57;
pub const BGFX_TEXTURE_FORMAT_BGRA8: bgfx_texture_format = 58;
pub const BGFX_TEXTURE_FORMAT_RGBA8: bgfx_texture_format = 59;
pub const BGFX_TEXTURE_FORMAT_RGBA8I: bgfx_texture_format = 60;
pub const BGFX_TEXTURE_FORMAT_RGBA8U: bgfx_texture_format = 61;
pub const BGFX_TEXTURE_FORMAT_RGBA8S: bgfx_texture_format = 62;
pub const BGFX_TEXTURE_FORMAT_RGBA16: bgfx_texture_format = 63;
pub const BGFX_TEXTURE_FORMAT_RGBA16I: bgfx_texture_format = 64;
pub const BGFX_TEXTURE_FORMAT_RGBA16U: bgfx_texture_format = 65;
pub const BGFX_TEXTURE_FORMAT_RGBA16F: bgfx_texture_format = 66;
pub const BGFX_TEXTURE_FORMAT_RGBA16S: bgfx_texture_format = 67;
pub const BGFX_TEXTURE_FORMAT_RGBA32I: bgfx_texture_format = 68;
pub const BGFX_TEXTURE_FORMAT_RGBA32U: bgfx_texture_format = 69;
pub const BGFX_TEXTURE_FORMAT_RGBA32F: bgfx_texture_format = 70;
pub const BGFX_TEXTURE_FORMAT_R5G6B5: bgfx_texture_format = 71;
pub const BGFX_TEXTURE_FORMAT_RGBA4: bgfx_texture_format = 72;
pub const BGFX_TEXTURE_FORMAT_RGB5A1: bgfx_texture_format = 73;
pub const BGFX_TEXTURE_FORMAT_RGB10A2: bgfx_texture_format = 74;
pub const BGFX_TEXTURE_FORMAT_RG11B10F: bgfx_texture_format = 75;
pub const BGFX_TEXTURE_FORMAT_UNKNOWNDEPTH: bgfx_texture_format = 76;
pub const BGFX_TEXTURE_FORMAT_D16: bgfx_texture_format = 77;
pub const BGFX_TEXTURE_FORMAT_D24: bgfx_texture_format = 78;
pub const BGFX_TEXTURE_FORMAT_D24S8: bgfx_texture_format = 79;
pub const BGFX_TEXTURE_FORMAT_D32: bgfx_texture_format = 80;
pub const BGFX_TEXTURE_FORMAT_D16F: bgfx_texture_format = 81;
pub const BGFX_TEXTURE_FORMAT_D24F: bgfx_texture_format = 82;
pub const BGFX_TEXTURE_FORMAT_D32F: bgfx_texture_format = 83;
pub const BGFX_TEXTURE_FORMAT_D0S8: bgfx_texture_format = 84;
pub const BGFX_TEXTURE_FORMAT_COUNT: bgfx_texture_format = 85;
pub type bgfx_texture_format = i32;
pub use self::bgfx_texture_format as bgfx_texture_format_t;
pub const BGFX_UNIFORM_TYPE_SAMPLER: bgfx_uniform_type = 0;
pub const BGFX_UNIFORM_TYPE_END: bgfx_uniform_type = 1;
pub const BGFX_UNIFORM_TYPE_VEC4: bgfx_uniform_type = 2;
pub const BGFX_UNIFORM_TYPE_MAT3: bgfx_uniform_type = 3;
pub const BGFX_UNIFORM_TYPE_MAT4: bgfx_uniform_type = 4;
pub const BGFX_UNIFORM_TYPE_COUNT: bgfx_uniform_type = 5;
pub type bgfx_uniform_type = i32;
pub use self::bgfx_uniform_type as bgfx_uniform_type_t;
pub const BGFX_BACKBUFFER_RATIO_EQUAL: bgfx_backbuffer_ratio = 0;
pub const BGFX_BACKBUFFER_RATIO_HALF: bgfx_backbuffer_ratio = 1;
pub const BGFX_BACKBUFFER_RATIO_QUARTER: bgfx_backbuffer_ratio = 2;
pub const BGFX_BACKBUFFER_RATIO_EIGHTH: bgfx_backbuffer_ratio = 3;
pub const BGFX_BACKBUFFER_RATIO_SIXTEENTH: bgfx_backbuffer_ratio = 4;
pub const BGFX_BACKBUFFER_RATIO_DOUBLE: bgfx_backbuffer_ratio = 5;
pub const BGFX_BACKBUFFER_RATIO_COUNT: bgfx_backbuffer_ratio = 6;
pub type bgfx_backbuffer_ratio = i32;
pub use self::bgfx_backbuffer_ratio as bgfx_backbuffer_ratio_t;
pub const BGFX_OCCLUSION_QUERY_RESULT_INVISIBLE: bgfx_occlusion_query_result = 0;
pub const BGFX_OCCLUSION_QUERY_RESULT_VISIBLE: bgfx_occlusion_query_result = 1;
pub const BGFX_OCCLUSION_QUERY_RESULT_NORESULT: bgfx_occlusion_query_result = 2;
pub const BGFX_OCCLUSION_QUERY_RESULT_COUNT: bgfx_occlusion_query_result = 3;
pub type bgfx_occlusion_query_result = i32;
pub use self::bgfx_occlusion_query_result as bgfx_occlusion_query_result_t;
pub const BGFX_TOPOLOGY_TRI_LIST: bgfx_topology = 0;
pub const BGFX_TOPOLOGY_TRI_STRIP: bgfx_topology = 1;
pub const BGFX_TOPOLOGY_LINE_LIST: bgfx_topology = 2;
pub const BGFX_TOPOLOGY_LINE_STRIP: bgfx_topology = 3;
pub const BGFX_TOPOLOGY_POINT_LIST: bgfx_topology = 4;
pub const BGFX_TOPOLOGY_COUNT: bgfx_topology = 5;
pub type bgfx_topology = i32;
pub use self::bgfx_topology as bgfx_topology_t;
pub const BGFX_TOPOLOGY_CONVERT_TRI_LIST_FLIP_WINDING: bgfx_topology_convert = 0;
pub const BGFX_TOPOLOGY_CONVERT_TRI_STRIP_FLIP_WINDING: bgfx_topology_convert = 1;
pub const BGFX_TOPOLOGY_CONVERT_TRI_LIST_TO_LINE_LIST: bgfx_topology_convert = 2;
pub const BGFX_TOPOLOGY_CONVERT_TRI_STRIP_TO_TRI_LIST: bgfx_topology_convert = 3;
pub const BGFX_TOPOLOGY_CONVERT_LINE_STRIP_TO_LINE_LIST: bgfx_topology_convert = 4;
pub const BGFX_TOPOLOGY_CONVERT_COUNT: bgfx_topology_convert = 5;
pub type bgfx_topology_convert = i32;
pub use self::bgfx_topology_convert as bgfx_topology_convert_t;
pub const BGFX_TOPOLOGY_SORT_DIRECTION_FRONT_TO_BACK_MIN: bgfx_topology_sort = 0;
pub const BGFX_TOPOLOGY_SORT_DIRECTION_FRONT_TO_BACK_AVG: bgfx_topology_sort = 1;
pub const BGFX_TOPOLOGY_SORT_DIRECTION_FRONT_TO_BACK_MAX: bgfx_topology_sort = 2;
pub const BGFX_TOPOLOGY_SORT_DIRECTION_BACK_TO_FRONT_MIN: bgfx_topology_sort = 3;
pub const BGFX_TOPOLOGY_SORT_DIRECTION_BACK_TO_FRONT_AVG: bgfx_topology_sort = 4;
pub const BGFX_TOPOLOGY_SORT_DIRECTION_BACK_TO_FRONT_MAX: bgfx_topology_sort = 5;
pub const BGFX_TOPOLOGY_SORT_DISTANCE_FRONT_TO_BACK_MIN: bgfx_topology_sort = 6;
pub const BGFX_TOPOLOGY_SORT_DISTANCE_FRONT_TO_BACK_AVG: bgfx_topology_sort = 7;
pub const BGFX_TOPOLOGY_SORT_DISTANCE_FRONT_TO_BACK_MAX: bgfx_topology_sort = 8;
pub const BGFX_TOPOLOGY_SORT_DISTANCE_BACK_TO_FRONT_MIN: bgfx_topology_sort = 9;
pub const BGFX_TOPOLOGY_SORT_DISTANCE_BACK_TO_FRONT_AVG: bgfx_topology_sort = 10;
pub const BGFX_TOPOLOGY_SORT_DISTANCE_BACK_TO_FRONT_MAX: bgfx_topology_sort = 11;
pub const BGFX_TOPOLOGY_SORT_COUNT: bgfx_topology_sort = 12;
pub type bgfx_topology_sort = i32;
pub use self::bgfx_topology_sort as bgfx_topology_sort_t;
pub const BGFX_VIEW_MODE_DEFAULT: bgfx_view_mode = 0;
pub const BGFX_VIEW_MODE_SEQUENTIAL: bgfx_view_mode = 1;
pub const BGFX_VIEW_MODE_DEPTH_ASCENDING: bgfx_view_mode = 2;
pub const BGFX_VIEW_MODE_DEPTH_DESCENDING: bgfx_view_mode = 3;
pub const BGFX_VIEW_MODE_COUNT: bgfx_view_mode = 4;
pub type bgfx_view_mode = i32;
pub use self::bgfx_view_mode as bgfx_view_mode_t;
pub const BGFX_RENDER_FRAME_NO_CONTEXT: bgfx_render_frame = 0;
pub const BGFX_RENDER_FRAME_RENDER: bgfx_render_frame = 1;
pub const BGFX_RENDER_FRAME_TIMEOUT: bgfx_render_frame = 2;
pub const BGFX_RENDER_FRAME_EXITING: bgfx_render_frame = 3;
pub const BGFX_RENDER_FRAME_COUNT: bgfx_render_frame = 4;
pub type bgfx_render_frame = i32;
pub use self::bgfx_render_frame as bgfx_render_frame_t;
pub type bgfx_view_id_t = u16;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bgfx_allocator_interface_s {
    pub vtbl: *const bgfx_allocator_vtbl_s,
}
#[test]
fn bindgen_test_layout_bgfx_allocator_interface_s() {
    assert_eq!(
        ::std::mem::size_of::<bgfx_allocator_interface_s>(),
        8usize,
        concat!("Size of: ", stringify!(bgfx_allocator_interface_s))
    );
    assert_eq!(
        ::std::mem::align_of::<bgfx_allocator_interface_s>(),
        8usize,
        concat!("Alignment of ", stringify!(bgfx_allocator_interface_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_allocator_interface_s>())).vtbl as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_allocator_interface_s),
            "::",
            stringify!(vtbl)
        )
    );
}
pub type bgfx_allocator_interface_t = bgfx_allocator_interface_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bgfx_allocator_vtbl_s {
    pub realloc: ::std::option::Option<
        unsafe extern "C" fn(
            _this: *mut bgfx_allocator_interface_t,
            _ptr: *mut ::std::os::raw::c_void,
            _size: usize,
            _align: usize,
            _file: *const ::std::os::raw::c_char,
            _line: u32,
        ) -> *mut ::std::os::raw::c_void,
    >,
}
#[test]
fn bindgen_test_layout_bgfx_allocator_vtbl_s() {
    assert_eq!(
        ::std::mem::size_of::<bgfx_allocator_vtbl_s>(),
        8usize,
        concat!("Size of: ", stringify!(bgfx_allocator_vtbl_s))
    );
    assert_eq!(
        ::std::mem::align_of::<bgfx_allocator_vtbl_s>(),
        8usize,
        concat!("Alignment of ", stringify!(bgfx_allocator_vtbl_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_allocator_vtbl_s>())).realloc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_allocator_vtbl_s),
            "::",
            stringify!(realloc)
        )
    );
}
pub type bgfx_allocator_vtbl_t = bgfx_allocator_vtbl_s;
pub type bgfx_interface_vtbl_t = bgfx_interface_vtbl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bgfx_callback_interface_s {
    pub vtbl: *const bgfx_callback_vtbl_s,
}
#[test]
fn bindgen_test_layout_bgfx_callback_interface_s() {
    assert_eq!(
        ::std::mem::size_of::<bgfx_callback_interface_s>(),
        8usize,
        concat!("Size of: ", stringify!(bgfx_callback_interface_s))
    );
    assert_eq!(
        ::std::mem::align_of::<bgfx_callback_interface_s>(),
        8usize,
        concat!("Alignment of ", stringify!(bgfx_callback_interface_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_callback_interface_s>())).vtbl as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_callback_interface_s),
            "::",
            stringify!(vtbl)
        )
    );
}
pub type bgfx_callback_interface_t = bgfx_callback_interface_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bgfx_callback_vtbl_s {
    pub fatal: ::std::option::Option<
        unsafe extern "C" fn(
            _this: *mut bgfx_callback_interface_t,
            _filePath: *const ::std::os::raw::c_char,
            _line: u16,
            _code: bgfx_fatal_t,
            _str: *const ::std::os::raw::c_char,
        ),
    >,
    pub trace_vargs: ::std::option::Option<
        unsafe extern "C" fn(
            _this: *mut bgfx_callback_interface_t,
            _filePath: *const ::std::os::raw::c_char,
            _line: u16,
            _format: *const ::std::os::raw::c_char,
            _argList: va_list,
        ),
    >,
    pub profiler_begin: ::std::option::Option<
        unsafe extern "C" fn(
            _this: *mut bgfx_callback_interface_t,
            _name: *const ::std::os::raw::c_char,
            _abgr: u32,
            _filePath: *const ::std::os::raw::c_char,
            _line: u16,
        ),
    >,
    pub profiler_begin_literal: ::std::option::Option<
        unsafe extern "C" fn(
            _this: *mut bgfx_callback_interface_t,
            _name: *const ::std::os::raw::c_char,
            _abgr: u32,
            _filePath: *const ::std::os::raw::c_char,
            _line: u16,
        ),
    >,
    pub profiler_end:
        ::std::option::Option<unsafe extern "C" fn(_this: *mut bgfx_callback_interface_t)>,
    pub cache_read_size: ::std::option::Option<
        unsafe extern "C" fn(_this: *mut bgfx_callback_interface_t, _id: u64) -> u32,
    >,
    pub cache_read: ::std::option::Option<
        unsafe extern "C" fn(
            _this: *mut bgfx_callback_interface_t,
            _id: u64,
            _data: *mut ::std::os::raw::c_void,
            _size: u32,
        ) -> bool,
    >,
    pub cache_write: ::std::option::Option<
        unsafe extern "C" fn(
            _this: *mut bgfx_callback_interface_t,
            _id: u64,
            _data: *const ::std::os::raw::c_void,
            _size: u32,
        ),
    >,
    pub screen_shot: ::std::option::Option<
        unsafe extern "C" fn(
            _this: *mut bgfx_callback_interface_t,
            _filePath: *const ::std::os::raw::c_char,
            _width: u32,
            _height: u32,
            _pitch: u32,
            _data: *const ::std::os::raw::c_void,
            _size: u32,
            _yflip: bool,
        ),
    >,
    pub capture_begin: ::std::option::Option<
        unsafe extern "C" fn(
            _this: *mut bgfx_callback_interface_t,
            _width: u32,
            _height: u32,
            _pitch: u32,
            _format: bgfx_texture_format_t,
            _yflip: bool,
        ),
    >,
    pub capture_end:
        ::std::option::Option<unsafe extern "C" fn(_this: *mut bgfx_callback_interface_t)>,
    pub capture_frame: ::std::option::Option<
        unsafe extern "C" fn(
            _this: *mut bgfx_callback_interface_t,
            _data: *const ::std::os::raw::c_void,
            _size: u32,
        ),
    >,
}
#[test]
fn bindgen_test_layout_bgfx_callback_vtbl_s() {
    assert_eq!(
        ::std::mem::size_of::<bgfx_callback_vtbl_s>(),
        96usize,
        concat!("Size of: ", stringify!(bgfx_callback_vtbl_s))
    );
    assert_eq!(
        ::std::mem::align_of::<bgfx_callback_vtbl_s>(),
        8usize,
        concat!("Alignment of ", stringify!(bgfx_callback_vtbl_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_callback_vtbl_s>())).fatal as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_callback_vtbl_s),
            "::",
            stringify!(fatal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_callback_vtbl_s>())).trace_vargs as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_callback_vtbl_s),
            "::",
            stringify!(trace_vargs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_callback_vtbl_s>())).profiler_begin as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_callback_vtbl_s),
            "::",
            stringify!(profiler_begin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_callback_vtbl_s>())).profiler_begin_literal as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_callback_vtbl_s),
            "::",
            stringify!(profiler_begin_literal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_callback_vtbl_s>())).profiler_end as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_callback_vtbl_s),
            "::",
            stringify!(profiler_end)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_callback_vtbl_s>())).cache_read_size as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_callback_vtbl_s),
            "::",
            stringify!(cache_read_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_callback_vtbl_s>())).cache_read as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_callback_vtbl_s),
            "::",
            stringify!(cache_read)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_callback_vtbl_s>())).cache_write as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_callback_vtbl_s),
            "::",
            stringify!(cache_write)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_callback_vtbl_s>())).screen_shot as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_callback_vtbl_s),
            "::",
            stringify!(screen_shot)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_callback_vtbl_s>())).capture_begin as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_callback_vtbl_s),
            "::",
            stringify!(capture_begin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_callback_vtbl_s>())).capture_end as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_callback_vtbl_s),
            "::",
            stringify!(capture_end)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_callback_vtbl_s>())).capture_frame as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_callback_vtbl_s),
            "::",
            stringify!(capture_frame)
        )
    );
}
pub type bgfx_callback_vtbl_t = bgfx_callback_vtbl_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bgfx_dynamic_index_buffer_handle_s {
    pub idx: u16,
}
#[test]
fn bindgen_test_layout_bgfx_dynamic_index_buffer_handle_s() {
    assert_eq!(
        ::std::mem::size_of::<bgfx_dynamic_index_buffer_handle_s>(),
        2usize,
        concat!("Size of: ", stringify!(bgfx_dynamic_index_buffer_handle_s))
    );
    assert_eq!(
        ::std::mem::align_of::<bgfx_dynamic_index_buffer_handle_s>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(bgfx_dynamic_index_buffer_handle_s)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_dynamic_index_buffer_handle_s>())).idx as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_dynamic_index_buffer_handle_s),
            "::",
            stringify!(idx)
        )
    );
}
pub type bgfx_dynamic_index_buffer_handle_t = bgfx_dynamic_index_buffer_handle_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bgfx_dynamic_vertex_buffer_handle_s {
    pub idx: u16,
}
#[test]
fn bindgen_test_layout_bgfx_dynamic_vertex_buffer_handle_s() {
    assert_eq!(
        ::std::mem::size_of::<bgfx_dynamic_vertex_buffer_handle_s>(),
        2usize,
        concat!("Size of: ", stringify!(bgfx_dynamic_vertex_buffer_handle_s))
    );
    assert_eq!(
        ::std::mem::align_of::<bgfx_dynamic_vertex_buffer_handle_s>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(bgfx_dynamic_vertex_buffer_handle_s)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_dynamic_vertex_buffer_handle_s>())).idx as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_dynamic_vertex_buffer_handle_s),
            "::",
            stringify!(idx)
        )
    );
}
pub type bgfx_dynamic_vertex_buffer_handle_t = bgfx_dynamic_vertex_buffer_handle_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bgfx_frame_buffer_handle_s {
    pub idx: u16,
}
#[test]
fn bindgen_test_layout_bgfx_frame_buffer_handle_s() {
    assert_eq!(
        ::std::mem::size_of::<bgfx_frame_buffer_handle_s>(),
        2usize,
        concat!("Size of: ", stringify!(bgfx_frame_buffer_handle_s))
    );
    assert_eq!(
        ::std::mem::align_of::<bgfx_frame_buffer_handle_s>(),
        2usize,
        concat!("Alignment of ", stringify!(bgfx_frame_buffer_handle_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_frame_buffer_handle_s>())).idx as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_frame_buffer_handle_s),
            "::",
            stringify!(idx)
        )
    );
}
pub type bgfx_frame_buffer_handle_t = bgfx_frame_buffer_handle_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bgfx_index_buffer_handle_s {
    pub idx: u16,
}
#[test]
fn bindgen_test_layout_bgfx_index_buffer_handle_s() {
    assert_eq!(
        ::std::mem::size_of::<bgfx_index_buffer_handle_s>(),
        2usize,
        concat!("Size of: ", stringify!(bgfx_index_buffer_handle_s))
    );
    assert_eq!(
        ::std::mem::align_of::<bgfx_index_buffer_handle_s>(),
        2usize,
        concat!("Alignment of ", stringify!(bgfx_index_buffer_handle_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_index_buffer_handle_s>())).idx as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_index_buffer_handle_s),
            "::",
            stringify!(idx)
        )
    );
}
pub type bgfx_index_buffer_handle_t = bgfx_index_buffer_handle_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bgfx_indirect_buffer_handle_s {
    pub idx: u16,
}
#[test]
fn bindgen_test_layout_bgfx_indirect_buffer_handle_s() {
    assert_eq!(
        ::std::mem::size_of::<bgfx_indirect_buffer_handle_s>(),
        2usize,
        concat!("Size of: ", stringify!(bgfx_indirect_buffer_handle_s))
    );
    assert_eq!(
        ::std::mem::align_of::<bgfx_indirect_buffer_handle_s>(),
        2usize,
        concat!("Alignment of ", stringify!(bgfx_indirect_buffer_handle_s))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_indirect_buffer_handle_s>())).idx as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_indirect_buffer_handle_s),
            "::",
            stringify!(idx)
        )
    );
}
pub type bgfx_indirect_buffer_handle_t = bgfx_indirect_buffer_handle_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bgfx_occlusion_query_handle_s {
    pub idx: u16,
}
#[test]
fn bindgen_test_layout_bgfx_occlusion_query_handle_s() {
    assert_eq!(
        ::std::mem::size_of::<bgfx_occlusion_query_handle_s>(),
        2usize,
        concat!("Size of: ", stringify!(bgfx_occlusion_query_handle_s))
    );
    assert_eq!(
        ::std::mem::align_of::<bgfx_occlusion_query_handle_s>(),
        2usize,
        concat!("Alignment of ", stringify!(bgfx_occlusion_query_handle_s))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_occlusion_query_handle_s>())).idx as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_occlusion_query_handle_s),
            "::",
            stringify!(idx)
        )
    );
}
pub type bgfx_occlusion_query_handle_t = bgfx_occlusion_query_handle_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bgfx_program_handle_s {
    pub idx: u16,
}
#[test]
fn bindgen_test_layout_bgfx_program_handle_s() {
    assert_eq!(
        ::std::mem::size_of::<bgfx_program_handle_s>(),
        2usize,
        concat!("Size of: ", stringify!(bgfx_program_handle_s))
    );
    assert_eq!(
        ::std::mem::align_of::<bgfx_program_handle_s>(),
        2usize,
        concat!("Alignment of ", stringify!(bgfx_program_handle_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_program_handle_s>())).idx as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_program_handle_s),
            "::",
            stringify!(idx)
        )
    );
}
pub type bgfx_program_handle_t = bgfx_program_handle_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bgfx_shader_handle_s {
    pub idx: u16,
}
#[test]
fn bindgen_test_layout_bgfx_shader_handle_s() {
    assert_eq!(
        ::std::mem::size_of::<bgfx_shader_handle_s>(),
        2usize,
        concat!("Size of: ", stringify!(bgfx_shader_handle_s))
    );
    assert_eq!(
        ::std::mem::align_of::<bgfx_shader_handle_s>(),
        2usize,
        concat!("Alignment of ", stringify!(bgfx_shader_handle_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_shader_handle_s>())).idx as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_shader_handle_s),
            "::",
            stringify!(idx)
        )
    );
}
pub type bgfx_shader_handle_t = bgfx_shader_handle_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bgfx_texture_handle_s {
    pub idx: u16,
}
#[test]
fn bindgen_test_layout_bgfx_texture_handle_s() {
    assert_eq!(
        ::std::mem::size_of::<bgfx_texture_handle_s>(),
        2usize,
        concat!("Size of: ", stringify!(bgfx_texture_handle_s))
    );
    assert_eq!(
        ::std::mem::align_of::<bgfx_texture_handle_s>(),
        2usize,
        concat!("Alignment of ", stringify!(bgfx_texture_handle_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_texture_handle_s>())).idx as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_texture_handle_s),
            "::",
            stringify!(idx)
        )
    );
}
pub type bgfx_texture_handle_t = bgfx_texture_handle_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bgfx_uniform_handle_s {
    pub idx: u16,
}
#[test]
fn bindgen_test_layout_bgfx_uniform_handle_s() {
    assert_eq!(
        ::std::mem::size_of::<bgfx_uniform_handle_s>(),
        2usize,
        concat!("Size of: ", stringify!(bgfx_uniform_handle_s))
    );
    assert_eq!(
        ::std::mem::align_of::<bgfx_uniform_handle_s>(),
        2usize,
        concat!("Alignment of ", stringify!(bgfx_uniform_handle_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_uniform_handle_s>())).idx as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_uniform_handle_s),
            "::",
            stringify!(idx)
        )
    );
}
pub type bgfx_uniform_handle_t = bgfx_uniform_handle_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bgfx_vertex_buffer_handle_s {
    pub idx: u16,
}
#[test]
fn bindgen_test_layout_bgfx_vertex_buffer_handle_s() {
    assert_eq!(
        ::std::mem::size_of::<bgfx_vertex_buffer_handle_s>(),
        2usize,
        concat!("Size of: ", stringify!(bgfx_vertex_buffer_handle_s))
    );
    assert_eq!(
        ::std::mem::align_of::<bgfx_vertex_buffer_handle_s>(),
        2usize,
        concat!("Alignment of ", stringify!(bgfx_vertex_buffer_handle_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_vertex_buffer_handle_s>())).idx as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_vertex_buffer_handle_s),
            "::",
            stringify!(idx)
        )
    );
}
pub type bgfx_vertex_buffer_handle_t = bgfx_vertex_buffer_handle_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bgfx_vertex_decl_handle_s {
    pub idx: u16,
}
#[test]
fn bindgen_test_layout_bgfx_vertex_decl_handle_s() {
    assert_eq!(
        ::std::mem::size_of::<bgfx_vertex_decl_handle_s>(),
        2usize,
        concat!("Size of: ", stringify!(bgfx_vertex_decl_handle_s))
    );
    assert_eq!(
        ::std::mem::align_of::<bgfx_vertex_decl_handle_s>(),
        2usize,
        concat!("Alignment of ", stringify!(bgfx_vertex_decl_handle_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_vertex_decl_handle_s>())).idx as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_vertex_decl_handle_s),
            "::",
            stringify!(idx)
        )
    );
}
pub type bgfx_vertex_decl_handle_t = bgfx_vertex_decl_handle_s;
pub type bgfx_release_fn_t = ::std::option::Option<
    unsafe extern "C" fn(_ptr: *mut ::std::os::raw::c_void, _userData: *mut ::std::os::raw::c_void),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bgfx_caps_gpu_s {
    pub vendorId: u16,
    pub deviceId: u16,
}
#[test]
fn bindgen_test_layout_bgfx_caps_gpu_s() {
    assert_eq!(
        ::std::mem::size_of::<bgfx_caps_gpu_s>(),
        4usize,
        concat!("Size of: ", stringify!(bgfx_caps_gpu_s))
    );
    assert_eq!(
        ::std::mem::align_of::<bgfx_caps_gpu_s>(),
        2usize,
        concat!("Alignment of ", stringify!(bgfx_caps_gpu_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_caps_gpu_s>())).vendorId as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_caps_gpu_s),
            "::",
            stringify!(vendorId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_caps_gpu_s>())).deviceId as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_caps_gpu_s),
            "::",
            stringify!(deviceId)
        )
    );
}
pub type bgfx_caps_gpu_t = bgfx_caps_gpu_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bgfx_caps_limits_s {
    pub maxDrawCalls: u32,
    pub maxBlits: u32,
    pub maxTextureSize: u32,
    pub maxTextureLayers: u32,
    pub maxViews: u32,
    pub maxFrameBuffers: u32,
    pub maxFBAttachments: u32,
    pub maxPrograms: u32,
    pub maxShaders: u32,
    pub maxTextures: u32,
    pub maxTextureSamplers: u32,
    pub maxComputeBindings: u32,
    pub maxVertexDecls: u32,
    pub maxVertexStreams: u32,
    pub maxIndexBuffers: u32,
    pub maxVertexBuffers: u32,
    pub maxDynamicIndexBuffers: u32,
    pub maxDynamicVertexBuffers: u32,
    pub maxUniforms: u32,
    pub maxOcclusionQueries: u32,
    pub maxEncoders: u32,
    pub transientVbSize: u32,
    pub transientIbSize: u32,
}
#[test]
fn bindgen_test_layout_bgfx_caps_limits_s() {
    assert_eq!(
        ::std::mem::size_of::<bgfx_caps_limits_s>(),
        92usize,
        concat!("Size of: ", stringify!(bgfx_caps_limits_s))
    );
    assert_eq!(
        ::std::mem::align_of::<bgfx_caps_limits_s>(),
        4usize,
        concat!("Alignment of ", stringify!(bgfx_caps_limits_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_caps_limits_s>())).maxDrawCalls as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_caps_limits_s),
            "::",
            stringify!(maxDrawCalls)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_caps_limits_s>())).maxBlits as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_caps_limits_s),
            "::",
            stringify!(maxBlits)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_caps_limits_s>())).maxTextureSize as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_caps_limits_s),
            "::",
            stringify!(maxTextureSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_caps_limits_s>())).maxTextureLayers as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_caps_limits_s),
            "::",
            stringify!(maxTextureLayers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_caps_limits_s>())).maxViews as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_caps_limits_s),
            "::",
            stringify!(maxViews)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_caps_limits_s>())).maxFrameBuffers as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_caps_limits_s),
            "::",
            stringify!(maxFrameBuffers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_caps_limits_s>())).maxFBAttachments as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_caps_limits_s),
            "::",
            stringify!(maxFBAttachments)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_caps_limits_s>())).maxPrograms as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_caps_limits_s),
            "::",
            stringify!(maxPrograms)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_caps_limits_s>())).maxShaders as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_caps_limits_s),
            "::",
            stringify!(maxShaders)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_caps_limits_s>())).maxTextures as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_caps_limits_s),
            "::",
            stringify!(maxTextures)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_caps_limits_s>())).maxTextureSamplers as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_caps_limits_s),
            "::",
            stringify!(maxTextureSamplers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_caps_limits_s>())).maxComputeBindings as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_caps_limits_s),
            "::",
            stringify!(maxComputeBindings)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_caps_limits_s>())).maxVertexDecls as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_caps_limits_s),
            "::",
            stringify!(maxVertexDecls)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_caps_limits_s>())).maxVertexStreams as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_caps_limits_s),
            "::",
            stringify!(maxVertexStreams)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_caps_limits_s>())).maxIndexBuffers as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_caps_limits_s),
            "::",
            stringify!(maxIndexBuffers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_caps_limits_s>())).maxVertexBuffers as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_caps_limits_s),
            "::",
            stringify!(maxVertexBuffers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_caps_limits_s>())).maxDynamicIndexBuffers as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_caps_limits_s),
            "::",
            stringify!(maxDynamicIndexBuffers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_caps_limits_s>())).maxDynamicVertexBuffers as *const _
                as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_caps_limits_s),
            "::",
            stringify!(maxDynamicVertexBuffers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_caps_limits_s>())).maxUniforms as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_caps_limits_s),
            "::",
            stringify!(maxUniforms)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_caps_limits_s>())).maxOcclusionQueries as *const _ as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_caps_limits_s),
            "::",
            stringify!(maxOcclusionQueries)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_caps_limits_s>())).maxEncoders as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_caps_limits_s),
            "::",
            stringify!(maxEncoders)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_caps_limits_s>())).transientVbSize as *const _ as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_caps_limits_s),
            "::",
            stringify!(transientVbSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_caps_limits_s>())).transientIbSize as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_caps_limits_s),
            "::",
            stringify!(transientIbSize)
        )
    );
}
pub type bgfx_caps_limits_t = bgfx_caps_limits_s;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bgfx_caps_s {
    pub rendererType: bgfx_renderer_type_t,
    pub supported: u64,
    pub vendorId: u16,
    pub deviceId: u16,
    pub homogeneousDepth: bool,
    pub originBottomLeft: bool,
    pub numGPUs: u8,
    pub gpu: [bgfx_caps_gpu_t; 4usize],
    pub limits: bgfx_caps_limits_t,
    pub formats: [u16; 85usize],
}
#[test]
fn bindgen_test_layout_bgfx_caps_s() {
    assert_eq!(
        ::std::mem::size_of::<bgfx_caps_s>(),
        304usize,
        concat!("Size of: ", stringify!(bgfx_caps_s))
    );
    assert_eq!(
        ::std::mem::align_of::<bgfx_caps_s>(),
        8usize,
        concat!("Alignment of ", stringify!(bgfx_caps_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_caps_s>())).rendererType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_caps_s),
            "::",
            stringify!(rendererType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_caps_s>())).supported as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_caps_s),
            "::",
            stringify!(supported)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_caps_s>())).vendorId as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_caps_s),
            "::",
            stringify!(vendorId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_caps_s>())).deviceId as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_caps_s),
            "::",
            stringify!(deviceId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_caps_s>())).homogeneousDepth as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_caps_s),
            "::",
            stringify!(homogeneousDepth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_caps_s>())).originBottomLeft as *const _ as usize },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_caps_s),
            "::",
            stringify!(originBottomLeft)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_caps_s>())).numGPUs as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_caps_s),
            "::",
            stringify!(numGPUs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_caps_s>())).gpu as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_caps_s),
            "::",
            stringify!(gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_caps_s>())).limits as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_caps_s),
            "::",
            stringify!(limits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_caps_s>())).formats as *const _ as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_caps_s),
            "::",
            stringify!(formats)
        )
    );
}
pub type bgfx_caps_t = bgfx_caps_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bgfx_internal_data_s {
    pub caps: *const bgfx_caps_t,
    pub context: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_bgfx_internal_data_s() {
    assert_eq!(
        ::std::mem::size_of::<bgfx_internal_data_s>(),
        16usize,
        concat!("Size of: ", stringify!(bgfx_internal_data_s))
    );
    assert_eq!(
        ::std::mem::align_of::<bgfx_internal_data_s>(),
        8usize,
        concat!("Alignment of ", stringify!(bgfx_internal_data_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_internal_data_s>())).caps as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_internal_data_s),
            "::",
            stringify!(caps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_internal_data_s>())).context as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_internal_data_s),
            "::",
            stringify!(context)
        )
    );
}
pub type bgfx_internal_data_t = bgfx_internal_data_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bgfx_platform_data_s {
    pub ndt: *mut ::std::os::raw::c_void,
    pub nwh: *mut ::std::os::raw::c_void,
    pub context: *mut ::std::os::raw::c_void,
    pub backBuffer: *mut ::std::os::raw::c_void,
    pub backBufferDS: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_bgfx_platform_data_s() {
    assert_eq!(
        ::std::mem::size_of::<bgfx_platform_data_s>(),
        40usize,
        concat!("Size of: ", stringify!(bgfx_platform_data_s))
    );
    assert_eq!(
        ::std::mem::align_of::<bgfx_platform_data_s>(),
        8usize,
        concat!("Alignment of ", stringify!(bgfx_platform_data_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_platform_data_s>())).ndt as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_platform_data_s),
            "::",
            stringify!(ndt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_platform_data_s>())).nwh as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_platform_data_s),
            "::",
            stringify!(nwh)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_platform_data_s>())).context as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_platform_data_s),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_platform_data_s>())).backBuffer as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_platform_data_s),
            "::",
            stringify!(backBuffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_platform_data_s>())).backBufferDS as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_platform_data_s),
            "::",
            stringify!(backBufferDS)
        )
    );
}
pub type bgfx_platform_data_t = bgfx_platform_data_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bgfx_resolution_s {
    pub format: bgfx_texture_format_t,
    pub width: u32,
    pub height: u32,
    pub reset: u32,
    pub numBackBuffers: u8,
    pub maxFrameLatency: u8,
}
#[test]
fn bindgen_test_layout_bgfx_resolution_s() {
    assert_eq!(
        ::std::mem::size_of::<bgfx_resolution_s>(),
        20usize,
        concat!("Size of: ", stringify!(bgfx_resolution_s))
    );
    assert_eq!(
        ::std::mem::align_of::<bgfx_resolution_s>(),
        4usize,
        concat!("Alignment of ", stringify!(bgfx_resolution_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_resolution_s>())).format as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_resolution_s),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_resolution_s>())).width as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_resolution_s),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_resolution_s>())).height as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_resolution_s),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_resolution_s>())).reset as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_resolution_s),
            "::",
            stringify!(reset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_resolution_s>())).numBackBuffers as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_resolution_s),
            "::",
            stringify!(numBackBuffers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_resolution_s>())).maxFrameLatency as *const _ as usize
        },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_resolution_s),
            "::",
            stringify!(maxFrameLatency)
        )
    );
}
pub type bgfx_resolution_t = bgfx_resolution_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bgfx_init_limits_s {
    pub maxEncoders: u16,
    pub transientVbSize: u32,
    pub transientIbSize: u32,
}
#[test]
fn bindgen_test_layout_bgfx_init_limits_s() {
    assert_eq!(
        ::std::mem::size_of::<bgfx_init_limits_s>(),
        12usize,
        concat!("Size of: ", stringify!(bgfx_init_limits_s))
    );
    assert_eq!(
        ::std::mem::align_of::<bgfx_init_limits_s>(),
        4usize,
        concat!("Alignment of ", stringify!(bgfx_init_limits_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_init_limits_s>())).maxEncoders as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_init_limits_s),
            "::",
            stringify!(maxEncoders)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_init_limits_s>())).transientVbSize as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_init_limits_s),
            "::",
            stringify!(transientVbSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_init_limits_s>())).transientIbSize as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_init_limits_s),
            "::",
            stringify!(transientIbSize)
        )
    );
}
pub type bgfx_init_limits_t = bgfx_init_limits_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bgfx_init_s {
    pub type_: bgfx_renderer_type_t,
    pub vendorId: u16,
    pub deviceId: u16,
    pub debug: bool,
    pub profile: bool,
    pub platformData: bgfx_platform_data_t,
    pub resolution: bgfx_resolution_t,
    pub limits: bgfx_init_limits_t,
    pub callback: *mut bgfx_callback_interface_t,
    pub allocator: *mut bgfx_allocator_interface_t,
}
#[test]
fn bindgen_test_layout_bgfx_init_s() {
    assert_eq!(
        ::std::mem::size_of::<bgfx_init_s>(),
        104usize,
        concat!("Size of: ", stringify!(bgfx_init_s))
    );
    assert_eq!(
        ::std::mem::align_of::<bgfx_init_s>(),
        8usize,
        concat!("Alignment of ", stringify!(bgfx_init_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_init_s>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_init_s),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_init_s>())).vendorId as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_init_s),
            "::",
            stringify!(vendorId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_init_s>())).deviceId as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_init_s),
            "::",
            stringify!(deviceId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_init_s>())).debug as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_init_s),
            "::",
            stringify!(debug)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_init_s>())).profile as *const _ as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_init_s),
            "::",
            stringify!(profile)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_init_s>())).platformData as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_init_s),
            "::",
            stringify!(platformData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_init_s>())).resolution as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_init_s),
            "::",
            stringify!(resolution)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_init_s>())).limits as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_init_s),
            "::",
            stringify!(limits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_init_s>())).callback as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_init_s),
            "::",
            stringify!(callback)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_init_s>())).allocator as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_init_s),
            "::",
            stringify!(allocator)
        )
    );
}
pub type bgfx_init_t = bgfx_init_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bgfx_memory_s {
    pub data: *mut u8,
    pub size: u32,
}
#[test]
fn bindgen_test_layout_bgfx_memory_s() {
    assert_eq!(
        ::std::mem::size_of::<bgfx_memory_s>(),
        16usize,
        concat!("Size of: ", stringify!(bgfx_memory_s))
    );
    assert_eq!(
        ::std::mem::align_of::<bgfx_memory_s>(),
        8usize,
        concat!("Alignment of ", stringify!(bgfx_memory_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_memory_s>())).data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_memory_s),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_memory_s>())).size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_memory_s),
            "::",
            stringify!(size)
        )
    );
}
pub type bgfx_memory_t = bgfx_memory_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bgfx_transient_index_buffer_s {
    pub data: *mut u8,
    pub size: u32,
    pub startIndex: u32,
    pub handle: bgfx_index_buffer_handle_t,
}
#[test]
fn bindgen_test_layout_bgfx_transient_index_buffer_s() {
    assert_eq!(
        ::std::mem::size_of::<bgfx_transient_index_buffer_s>(),
        24usize,
        concat!("Size of: ", stringify!(bgfx_transient_index_buffer_s))
    );
    assert_eq!(
        ::std::mem::align_of::<bgfx_transient_index_buffer_s>(),
        8usize,
        concat!("Alignment of ", stringify!(bgfx_transient_index_buffer_s))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_transient_index_buffer_s>())).data as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_transient_index_buffer_s),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_transient_index_buffer_s>())).size as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_transient_index_buffer_s),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_transient_index_buffer_s>())).startIndex as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_transient_index_buffer_s),
            "::",
            stringify!(startIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_transient_index_buffer_s>())).handle as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_transient_index_buffer_s),
            "::",
            stringify!(handle)
        )
    );
}
pub type bgfx_transient_index_buffer_t = bgfx_transient_index_buffer_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bgfx_transient_vertex_buffer_s {
    pub data: *mut u8,
    pub size: u32,
    pub startVertex: u32,
    pub stride: u16,
    pub handle: bgfx_vertex_buffer_handle_t,
    pub decl: bgfx_vertex_decl_handle_t,
}
#[test]
fn bindgen_test_layout_bgfx_transient_vertex_buffer_s() {
    assert_eq!(
        ::std::mem::size_of::<bgfx_transient_vertex_buffer_s>(),
        24usize,
        concat!("Size of: ", stringify!(bgfx_transient_vertex_buffer_s))
    );
    assert_eq!(
        ::std::mem::align_of::<bgfx_transient_vertex_buffer_s>(),
        8usize,
        concat!("Alignment of ", stringify!(bgfx_transient_vertex_buffer_s))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_transient_vertex_buffer_s>())).data as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_transient_vertex_buffer_s),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_transient_vertex_buffer_s>())).size as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_transient_vertex_buffer_s),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_transient_vertex_buffer_s>())).startVertex as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_transient_vertex_buffer_s),
            "::",
            stringify!(startVertex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_transient_vertex_buffer_s>())).stride as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_transient_vertex_buffer_s),
            "::",
            stringify!(stride)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_transient_vertex_buffer_s>())).handle as *const _ as usize
        },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_transient_vertex_buffer_s),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_transient_vertex_buffer_s>())).decl as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_transient_vertex_buffer_s),
            "::",
            stringify!(decl)
        )
    );
}
pub type bgfx_transient_vertex_buffer_t = bgfx_transient_vertex_buffer_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bgfx_instance_data_buffer_s {
    pub data: *mut u8,
    pub size: u32,
    pub offset: u32,
    pub num: u32,
    pub stride: u16,
    pub handle: bgfx_vertex_buffer_handle_t,
}
#[test]
fn bindgen_test_layout_bgfx_instance_data_buffer_s() {
    assert_eq!(
        ::std::mem::size_of::<bgfx_instance_data_buffer_s>(),
        24usize,
        concat!("Size of: ", stringify!(bgfx_instance_data_buffer_s))
    );
    assert_eq!(
        ::std::mem::align_of::<bgfx_instance_data_buffer_s>(),
        8usize,
        concat!("Alignment of ", stringify!(bgfx_instance_data_buffer_s))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_instance_data_buffer_s>())).data as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_instance_data_buffer_s),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_instance_data_buffer_s>())).size as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_instance_data_buffer_s),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_instance_data_buffer_s>())).offset as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_instance_data_buffer_s),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_instance_data_buffer_s>())).num as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_instance_data_buffer_s),
            "::",
            stringify!(num)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_instance_data_buffer_s>())).stride as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_instance_data_buffer_s),
            "::",
            stringify!(stride)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_instance_data_buffer_s>())).handle as *const _ as usize
        },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_instance_data_buffer_s),
            "::",
            stringify!(handle)
        )
    );
}
pub type bgfx_instance_data_buffer_t = bgfx_instance_data_buffer_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bgfx_texture_info_s {
    pub format: bgfx_texture_format_t,
    pub storageSize: u32,
    pub width: u16,
    pub height: u16,
    pub depth: u16,
    pub numLayers: u16,
    pub numMips: u8,
    pub bitsPerPixel: u8,
    pub cubeMap: bool,
}
#[test]
fn bindgen_test_layout_bgfx_texture_info_s() {
    assert_eq!(
        ::std::mem::size_of::<bgfx_texture_info_s>(),
        20usize,
        concat!("Size of: ", stringify!(bgfx_texture_info_s))
    );
    assert_eq!(
        ::std::mem::align_of::<bgfx_texture_info_s>(),
        4usize,
        concat!("Alignment of ", stringify!(bgfx_texture_info_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_texture_info_s>())).format as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_texture_info_s),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_texture_info_s>())).storageSize as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_texture_info_s),
            "::",
            stringify!(storageSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_texture_info_s>())).width as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_texture_info_s),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_texture_info_s>())).height as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_texture_info_s),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_texture_info_s>())).depth as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_texture_info_s),
            "::",
            stringify!(depth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_texture_info_s>())).numLayers as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_texture_info_s),
            "::",
            stringify!(numLayers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_texture_info_s>())).numMips as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_texture_info_s),
            "::",
            stringify!(numMips)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_texture_info_s>())).bitsPerPixel as *const _ as usize
        },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_texture_info_s),
            "::",
            stringify!(bitsPerPixel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_texture_info_s>())).cubeMap as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_texture_info_s),
            "::",
            stringify!(cubeMap)
        )
    );
}
pub type bgfx_texture_info_t = bgfx_texture_info_s;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bgfx_uniform_info_s {
    pub name: [::std::os::raw::c_char; 256usize],
    pub type_: bgfx_uniform_type_t,
    pub num: u16,
}
#[test]
fn bindgen_test_layout_bgfx_uniform_info_s() {
    assert_eq!(
        ::std::mem::size_of::<bgfx_uniform_info_s>(),
        264usize,
        concat!("Size of: ", stringify!(bgfx_uniform_info_s))
    );
    assert_eq!(
        ::std::mem::align_of::<bgfx_uniform_info_s>(),
        4usize,
        concat!("Alignment of ", stringify!(bgfx_uniform_info_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_uniform_info_s>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_uniform_info_s),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_uniform_info_s>())).type_ as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_uniform_info_s),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_uniform_info_s>())).num as *const _ as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_uniform_info_s),
            "::",
            stringify!(num)
        )
    );
}
pub type bgfx_uniform_info_t = bgfx_uniform_info_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bgfx_attachment_s {
    pub access: bgfx_access_t,
    pub handle: bgfx_texture_handle_t,
    pub mip: u16,
    pub layer: u16,
    pub resolve: u8,
}
#[test]
fn bindgen_test_layout_bgfx_attachment_s() {
    assert_eq!(
        ::std::mem::size_of::<bgfx_attachment_s>(),
        12usize,
        concat!("Size of: ", stringify!(bgfx_attachment_s))
    );
    assert_eq!(
        ::std::mem::align_of::<bgfx_attachment_s>(),
        4usize,
        concat!("Alignment of ", stringify!(bgfx_attachment_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_attachment_s>())).access as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_attachment_s),
            "::",
            stringify!(access)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_attachment_s>())).handle as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_attachment_s),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_attachment_s>())).mip as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_attachment_s),
            "::",
            stringify!(mip)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_attachment_s>())).layer as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_attachment_s),
            "::",
            stringify!(layer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_attachment_s>())).resolve as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_attachment_s),
            "::",
            stringify!(resolve)
        )
    );
}
pub type bgfx_attachment_t = bgfx_attachment_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bgfx_transform_s {
    pub data: *mut f32,
    pub num: u16,
}
#[test]
fn bindgen_test_layout_bgfx_transform_s() {
    assert_eq!(
        ::std::mem::size_of::<bgfx_transform_s>(),
        16usize,
        concat!("Size of: ", stringify!(bgfx_transform_s))
    );
    assert_eq!(
        ::std::mem::align_of::<bgfx_transform_s>(),
        8usize,
        concat!("Alignment of ", stringify!(bgfx_transform_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_transform_s>())).data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_transform_s),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_transform_s>())).num as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_transform_s),
            "::",
            stringify!(num)
        )
    );
}
pub type bgfx_transform_t = bgfx_transform_s;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bgfx_view_stats_s {
    pub name: [::std::os::raw::c_char; 256usize],
    pub view: bgfx_view_id_t,
    pub cpuTimeElapsed: i64,
    pub gpuTimeElapsed: i64,
}
#[test]
fn bindgen_test_layout_bgfx_view_stats_s() {
    assert_eq!(
        ::std::mem::size_of::<bgfx_view_stats_s>(),
        280usize,
        concat!("Size of: ", stringify!(bgfx_view_stats_s))
    );
    assert_eq!(
        ::std::mem::align_of::<bgfx_view_stats_s>(),
        8usize,
        concat!("Alignment of ", stringify!(bgfx_view_stats_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_view_stats_s>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_view_stats_s),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_view_stats_s>())).view as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_view_stats_s),
            "::",
            stringify!(view)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_view_stats_s>())).cpuTimeElapsed as *const _ as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_view_stats_s),
            "::",
            stringify!(cpuTimeElapsed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_view_stats_s>())).gpuTimeElapsed as *const _ as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_view_stats_s),
            "::",
            stringify!(gpuTimeElapsed)
        )
    );
}
pub type bgfx_view_stats_t = bgfx_view_stats_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bgfx_encoder_stats_s {
    pub cpuTimeBegin: i64,
    pub cpuTimeEnd: i64,
}
#[test]
fn bindgen_test_layout_bgfx_encoder_stats_s() {
    assert_eq!(
        ::std::mem::size_of::<bgfx_encoder_stats_s>(),
        16usize,
        concat!("Size of: ", stringify!(bgfx_encoder_stats_s))
    );
    assert_eq!(
        ::std::mem::align_of::<bgfx_encoder_stats_s>(),
        8usize,
        concat!("Alignment of ", stringify!(bgfx_encoder_stats_s))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_encoder_stats_s>())).cpuTimeBegin as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_encoder_stats_s),
            "::",
            stringify!(cpuTimeBegin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_encoder_stats_s>())).cpuTimeEnd as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_encoder_stats_s),
            "::",
            stringify!(cpuTimeEnd)
        )
    );
}
pub type bgfx_encoder_stats_t = bgfx_encoder_stats_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bgfx_stats_s {
    pub cpuTimeFrame: i64,
    pub cpuTimeBegin: i64,
    pub cpuTimeEnd: i64,
    pub cpuTimerFreq: i64,
    pub gpuTimeBegin: i64,
    pub gpuTimeEnd: i64,
    pub gpuTimerFreq: i64,
    pub waitRender: i64,
    pub waitSubmit: i64,
    pub numDraw: u32,
    pub numCompute: u32,
    pub numBlit: u32,
    pub maxGpuLatency: u32,
    pub numDynamicIndexBuffers: u16,
    pub numDynamicVertexBuffers: u16,
    pub numFrameBuffers: u16,
    pub numIndexBuffers: u16,
    pub numOcclusionQueries: u16,
    pub numPrograms: u16,
    pub numShaders: u16,
    pub numTextures: u16,
    pub numUniforms: u16,
    pub numVertexBuffers: u16,
    pub numVertexDecls: u16,
    pub textureMemoryUsed: i64,
    pub rtMemoryUsed: i64,
    pub transientVbUsed: i32,
    pub transientIbUsed: i32,
    pub numPrims: [u32; 5usize],
    pub gpuMemoryMax: i64,
    pub gpuMemoryUsed: i64,
    pub width: u16,
    pub height: u16,
    pub textWidth: u16,
    pub textHeight: u16,
    pub numViews: u16,
    pub viewStats: *mut bgfx_view_stats_t,
    pub numEncoders: u8,
    pub encoderStats: *mut bgfx_encoder_stats_t,
}
#[test]
fn bindgen_test_layout_bgfx_stats_s() {
    assert_eq!(
        ::std::mem::size_of::<bgfx_stats_s>(),
        216usize,
        concat!("Size of: ", stringify!(bgfx_stats_s))
    );
    assert_eq!(
        ::std::mem::align_of::<bgfx_stats_s>(),
        8usize,
        concat!("Alignment of ", stringify!(bgfx_stats_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_stats_s>())).cpuTimeFrame as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_stats_s),
            "::",
            stringify!(cpuTimeFrame)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_stats_s>())).cpuTimeBegin as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_stats_s),
            "::",
            stringify!(cpuTimeBegin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_stats_s>())).cpuTimeEnd as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_stats_s),
            "::",
            stringify!(cpuTimeEnd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_stats_s>())).cpuTimerFreq as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_stats_s),
            "::",
            stringify!(cpuTimerFreq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_stats_s>())).gpuTimeBegin as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_stats_s),
            "::",
            stringify!(gpuTimeBegin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_stats_s>())).gpuTimeEnd as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_stats_s),
            "::",
            stringify!(gpuTimeEnd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_stats_s>())).gpuTimerFreq as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_stats_s),
            "::",
            stringify!(gpuTimerFreq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_stats_s>())).waitRender as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_stats_s),
            "::",
            stringify!(waitRender)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_stats_s>())).waitSubmit as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_stats_s),
            "::",
            stringify!(waitSubmit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_stats_s>())).numDraw as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_stats_s),
            "::",
            stringify!(numDraw)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_stats_s>())).numCompute as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_stats_s),
            "::",
            stringify!(numCompute)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_stats_s>())).numBlit as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_stats_s),
            "::",
            stringify!(numBlit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_stats_s>())).maxGpuLatency as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_stats_s),
            "::",
            stringify!(maxGpuLatency)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_stats_s>())).numDynamicIndexBuffers as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_stats_s),
            "::",
            stringify!(numDynamicIndexBuffers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_stats_s>())).numDynamicVertexBuffers as *const _ as usize
        },
        90usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_stats_s),
            "::",
            stringify!(numDynamicVertexBuffers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_stats_s>())).numFrameBuffers as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_stats_s),
            "::",
            stringify!(numFrameBuffers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_stats_s>())).numIndexBuffers as *const _ as usize },
        94usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_stats_s),
            "::",
            stringify!(numIndexBuffers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_stats_s>())).numOcclusionQueries as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_stats_s),
            "::",
            stringify!(numOcclusionQueries)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_stats_s>())).numPrograms as *const _ as usize },
        98usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_stats_s),
            "::",
            stringify!(numPrograms)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_stats_s>())).numShaders as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_stats_s),
            "::",
            stringify!(numShaders)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_stats_s>())).numTextures as *const _ as usize },
        102usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_stats_s),
            "::",
            stringify!(numTextures)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_stats_s>())).numUniforms as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_stats_s),
            "::",
            stringify!(numUniforms)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_stats_s>())).numVertexBuffers as *const _ as usize },
        106usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_stats_s),
            "::",
            stringify!(numVertexBuffers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_stats_s>())).numVertexDecls as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_stats_s),
            "::",
            stringify!(numVertexDecls)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_stats_s>())).textureMemoryUsed as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_stats_s),
            "::",
            stringify!(textureMemoryUsed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_stats_s>())).rtMemoryUsed as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_stats_s),
            "::",
            stringify!(rtMemoryUsed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_stats_s>())).transientVbUsed as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_stats_s),
            "::",
            stringify!(transientVbUsed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_stats_s>())).transientIbUsed as *const _ as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_stats_s),
            "::",
            stringify!(transientIbUsed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_stats_s>())).numPrims as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_stats_s),
            "::",
            stringify!(numPrims)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_stats_s>())).gpuMemoryMax as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_stats_s),
            "::",
            stringify!(gpuMemoryMax)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_stats_s>())).gpuMemoryUsed as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_stats_s),
            "::",
            stringify!(gpuMemoryUsed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_stats_s>())).width as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_stats_s),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_stats_s>())).height as *const _ as usize },
        178usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_stats_s),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_stats_s>())).textWidth as *const _ as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_stats_s),
            "::",
            stringify!(textWidth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_stats_s>())).textHeight as *const _ as usize },
        182usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_stats_s),
            "::",
            stringify!(textHeight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_stats_s>())).numViews as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_stats_s),
            "::",
            stringify!(numViews)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_stats_s>())).viewStats as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_stats_s),
            "::",
            stringify!(viewStats)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_stats_s>())).numEncoders as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_stats_s),
            "::",
            stringify!(numEncoders)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_stats_s>())).encoderStats as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_stats_s),
            "::",
            stringify!(encoderStats)
        )
    );
}
pub type bgfx_stats_t = bgfx_stats_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bgfx_vertex_decl_s {
    pub hash: u32,
    pub stride: u16,
    pub offset: [u16; 18usize],
    pub attributes: [u16; 18usize],
}
#[test]
fn bindgen_test_layout_bgfx_vertex_decl_s() {
    assert_eq!(
        ::std::mem::size_of::<bgfx_vertex_decl_s>(),
        80usize,
        concat!("Size of: ", stringify!(bgfx_vertex_decl_s))
    );
    assert_eq!(
        ::std::mem::align_of::<bgfx_vertex_decl_s>(),
        4usize,
        concat!("Alignment of ", stringify!(bgfx_vertex_decl_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_vertex_decl_s>())).hash as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_vertex_decl_s),
            "::",
            stringify!(hash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_vertex_decl_s>())).stride as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_vertex_decl_s),
            "::",
            stringify!(stride)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_vertex_decl_s>())).offset as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_vertex_decl_s),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_vertex_decl_s>())).attributes as *const _ as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_vertex_decl_s),
            "::",
            stringify!(attributes)
        )
    );
}
pub type bgfx_vertex_decl_t = bgfx_vertex_decl_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bgfx_encoder_s {
    _unused: [u8; 0],
}
pub type bgfx_encoder_t = bgfx_encoder_s;
extern "C" {
    pub fn bgfx_attachment_init(
        _this: *mut bgfx_attachment_t,
        _handle: bgfx_texture_handle_t,
        _access: bgfx_access_t,
        _layer: u16,
        _mip: u16,
        _resolve: u8,
    );
}
extern "C" {
    pub fn bgfx_vertex_decl_begin(
        _this: *mut bgfx_vertex_decl_t,
        _rendererType: bgfx_renderer_type_t,
    ) -> *mut bgfx_vertex_decl_t;
}
extern "C" {
    pub fn bgfx_vertex_decl_add(
        _this: *mut bgfx_vertex_decl_t,
        _attrib: bgfx_attrib_t,
        _num: u8,
        _type: bgfx_attrib_type_t,
        _normalized: bool,
        _asInt: bool,
    ) -> *mut bgfx_vertex_decl_t;
}
extern "C" {
    pub fn bgfx_vertex_decl_decode(
        _this: *const bgfx_vertex_decl_t,
        _attrib: bgfx_attrib_t,
        _num: *mut u8,
        _type: *mut bgfx_attrib_type_t,
        _normalized: *mut bool,
        _asInt: *mut bool,
    );
}
extern "C" {
    pub fn bgfx_vertex_decl_has(_this: *const bgfx_vertex_decl_t, _attrib: bgfx_attrib_t) -> bool;
}
extern "C" {
    pub fn bgfx_vertex_decl_skip(
        _this: *mut bgfx_vertex_decl_t,
        _num: u8,
    ) -> *mut bgfx_vertex_decl_t;
}
extern "C" {
    pub fn bgfx_vertex_decl_end(_this: *mut bgfx_vertex_decl_t);
}
extern "C" {
    pub fn bgfx_vertex_pack(
        _input: *const f32,
        _inputNormalized: bool,
        _attr: bgfx_attrib_t,
        _decl: *const bgfx_vertex_decl_t,
        _data: *mut ::std::os::raw::c_void,
        _index: u32,
    );
}
extern "C" {
    pub fn bgfx_vertex_unpack(
        _output: *mut f32,
        _attr: bgfx_attrib_t,
        _decl: *const bgfx_vertex_decl_t,
        _data: *const ::std::os::raw::c_void,
        _index: u32,
    );
}
extern "C" {
    pub fn bgfx_vertex_convert(
        _dstDecl: *const bgfx_vertex_decl_t,
        _dstData: *mut ::std::os::raw::c_void,
        _srcDecl: *const bgfx_vertex_decl_t,
        _srcData: *const ::std::os::raw::c_void,
        _num: u32,
    );
}
extern "C" {
    pub fn bgfx_weld_vertices(
        _output: *mut u16,
        _decl: *const bgfx_vertex_decl_t,
        _data: *const ::std::os::raw::c_void,
        _num: u16,
        _epsilon: f32,
    ) -> u16;
}
extern "C" {
    pub fn bgfx_topology_convert(
        _conversion: bgfx_topology_convert_t,
        _dst: *mut ::std::os::raw::c_void,
        _dstSize: u32,
        _indices: *const ::std::os::raw::c_void,
        _numIndices: u32,
        _index32: bool,
    ) -> u32;
}
extern "C" {
    pub fn bgfx_topology_sort_tri_list(
        _sort: bgfx_topology_sort_t,
        _dst: *mut ::std::os::raw::c_void,
        _dstSize: u32,
        _dir: *const f32,
        _pos: *const f32,
        _vertices: *const ::std::os::raw::c_void,
        _stride: u32,
        _indices: *const ::std::os::raw::c_void,
        _numIndices: u32,
        _index32: bool,
    );
}
extern "C" {
    pub fn bgfx_get_supported_renderers(_max: u8, _enum: *mut bgfx_renderer_type_t) -> u8;
}
extern "C" {
    pub fn bgfx_get_renderer_name(_type: bgfx_renderer_type_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn bgfx_init_ctor(_init: *mut bgfx_init_t);
}
extern "C" {
    pub fn bgfx_init(_init: *const bgfx_init_t) -> bool;
}
extern "C" {
    pub fn bgfx_shutdown();
}
extern "C" {
    pub fn bgfx_reset(_width: u32, _height: u32, _flags: u32, _format: bgfx_texture_format_t);
}
extern "C" {
    pub fn bgfx_frame(_capture: bool) -> u32;
}
extern "C" {
    pub fn bgfx_get_renderer_type() -> bgfx_renderer_type_t;
}
extern "C" {
    pub fn bgfx_get_caps() -> *const bgfx_caps_t;
}
extern "C" {
    pub fn bgfx_get_stats() -> *const bgfx_stats_t;
}
extern "C" {
    pub fn bgfx_alloc(_size: u32) -> *const bgfx_memory_t;
}
extern "C" {
    pub fn bgfx_copy(_data: *const ::std::os::raw::c_void, _size: u32) -> *const bgfx_memory_t;
}
extern "C" {
    pub fn bgfx_make_ref(_data: *const ::std::os::raw::c_void, _size: u32) -> *const bgfx_memory_t;
}
extern "C" {
    pub fn bgfx_make_ref_release(
        _data: *const ::std::os::raw::c_void,
        _size: u32,
        _releaseFn: bgfx_release_fn_t,
        _userData: *mut ::std::os::raw::c_void,
    ) -> *const bgfx_memory_t;
}
extern "C" {
    pub fn bgfx_set_debug(_debug: u32);
}
extern "C" {
    pub fn bgfx_dbg_text_clear(_attr: u8, _small: bool);
}
extern "C" {
    pub fn bgfx_dbg_text_printf(
        _x: u16,
        _y: u16,
        _attr: u8,
        _format: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn bgfx_dbg_text_vprintf(
        _x: u16,
        _y: u16,
        _attr: u8,
        _format: *const ::std::os::raw::c_char,
        _argList: va_list,
    );
}
extern "C" {
    pub fn bgfx_dbg_text_image(
        _x: u16,
        _y: u16,
        _width: u16,
        _height: u16,
        _data: *const ::std::os::raw::c_void,
        _pitch: u16,
    );
}
extern "C" {
    pub fn bgfx_create_index_buffer(
        _mem: *const bgfx_memory_t,
        _flags: u16,
    ) -> bgfx_index_buffer_handle_t;
}
extern "C" {
    pub fn bgfx_set_index_buffer_name(
        _handle: bgfx_index_buffer_handle_t,
        _name: *const ::std::os::raw::c_char,
        _len: i32,
    );
}
extern "C" {
    pub fn bgfx_destroy_index_buffer(_handle: bgfx_index_buffer_handle_t);
}
extern "C" {
    pub fn bgfx_create_vertex_decl(_decl: *const bgfx_vertex_decl_t) -> bgfx_vertex_decl_handle_t;
}
extern "C" {
    pub fn bgfx_destroy_vertex_decl(_handle: bgfx_vertex_decl_handle_t);
}
extern "C" {
    pub fn bgfx_create_vertex_buffer(
        _mem: *const bgfx_memory_t,
        _decl: *const bgfx_vertex_decl_t,
        _flags: u16,
    ) -> bgfx_vertex_buffer_handle_t;
}
extern "C" {
    pub fn bgfx_set_vertex_buffer_name(
        _handle: bgfx_vertex_buffer_handle_t,
        _name: *const ::std::os::raw::c_char,
        _len: i32,
    );
}
extern "C" {
    pub fn bgfx_destroy_vertex_buffer(_handle: bgfx_vertex_buffer_handle_t);
}
extern "C" {
    pub fn bgfx_create_dynamic_index_buffer(
        _num: u32,
        _flags: u16,
    ) -> bgfx_dynamic_index_buffer_handle_t;
}
extern "C" {
    pub fn bgfx_create_dynamic_index_buffer_mem(
        _mem: *const bgfx_memory_t,
        _flags: u16,
    ) -> bgfx_dynamic_index_buffer_handle_t;
}
extern "C" {
    pub fn bgfx_update_dynamic_index_buffer(
        _handle: bgfx_dynamic_index_buffer_handle_t,
        _startIndex: u32,
        _mem: *const bgfx_memory_t,
    );
}
extern "C" {
    pub fn bgfx_destroy_dynamic_index_buffer(_handle: bgfx_dynamic_index_buffer_handle_t);
}
extern "C" {
    pub fn bgfx_create_dynamic_vertex_buffer(
        _num: u32,
        _decl: *const bgfx_vertex_decl_t,
        _flags: u16,
    ) -> bgfx_dynamic_vertex_buffer_handle_t;
}
extern "C" {
    pub fn bgfx_create_dynamic_vertex_buffer_mem(
        _mem: *const bgfx_memory_t,
        _decl: *const bgfx_vertex_decl_t,
        _flags: u16,
    ) -> bgfx_dynamic_vertex_buffer_handle_t;
}
extern "C" {
    pub fn bgfx_update_dynamic_vertex_buffer(
        _handle: bgfx_dynamic_vertex_buffer_handle_t,
        _startVertex: u32,
        _mem: *const bgfx_memory_t,
    );
}
extern "C" {
    pub fn bgfx_destroy_dynamic_vertex_buffer(_handle: bgfx_dynamic_vertex_buffer_handle_t);
}
extern "C" {
    pub fn bgfx_get_avail_transient_index_buffer(_num: u32) -> u32;
}
extern "C" {
    pub fn bgfx_get_avail_transient_vertex_buffer(
        _num: u32,
        _decl: *const bgfx_vertex_decl_t,
    ) -> u32;
}
extern "C" {
    pub fn bgfx_get_avail_instance_data_buffer(_num: u32, _stride: u16) -> u32;
}
extern "C" {
    pub fn bgfx_alloc_transient_index_buffer(_tib: *mut bgfx_transient_index_buffer_t, _num: u32);
}
extern "C" {
    pub fn bgfx_alloc_transient_vertex_buffer(
        _tvb: *mut bgfx_transient_vertex_buffer_t,
        _num: u32,
        _decl: *const bgfx_vertex_decl_t,
    );
}
extern "C" {
    pub fn bgfx_alloc_transient_buffers(
        _tvb: *mut bgfx_transient_vertex_buffer_t,
        _decl: *const bgfx_vertex_decl_t,
        _numVertices: u32,
        _tib: *mut bgfx_transient_index_buffer_t,
        _numIndices: u32,
    ) -> bool;
}
extern "C" {
    pub fn bgfx_alloc_instance_data_buffer(
        _idb: *mut bgfx_instance_data_buffer_t,
        _num: u32,
        _stride: u16,
    );
}
extern "C" {
    pub fn bgfx_create_indirect_buffer(_num: u32) -> bgfx_indirect_buffer_handle_t;
}
extern "C" {
    pub fn bgfx_destroy_indirect_buffer(_handle: bgfx_indirect_buffer_handle_t);
}
extern "C" {
    pub fn bgfx_create_shader(_mem: *const bgfx_memory_t) -> bgfx_shader_handle_t;
}
extern "C" {
    pub fn bgfx_get_shader_uniforms(
        _handle: bgfx_shader_handle_t,
        _uniforms: *mut bgfx_uniform_handle_t,
        _max: u16,
    ) -> u16;
}
extern "C" {
    pub fn bgfx_set_shader_name(
        _handle: bgfx_shader_handle_t,
        _name: *const ::std::os::raw::c_char,
        _len: i32,
    );
}
extern "C" {
    pub fn bgfx_destroy_shader(_handle: bgfx_shader_handle_t);
}
extern "C" {
    pub fn bgfx_create_program(
        _vsh: bgfx_shader_handle_t,
        _fsh: bgfx_shader_handle_t,
        _destroyShaders: bool,
    ) -> bgfx_program_handle_t;
}
extern "C" {
    pub fn bgfx_create_compute_program(
        _csh: bgfx_shader_handle_t,
        _destroyShaders: bool,
    ) -> bgfx_program_handle_t;
}
extern "C" {
    pub fn bgfx_destroy_program(_handle: bgfx_program_handle_t);
}
extern "C" {
    pub fn bgfx_is_texture_valid(
        _depth: u16,
        _cubeMap: bool,
        _numLayers: u16,
        _format: bgfx_texture_format_t,
        _flags: u64,
    ) -> bool;
}
extern "C" {
    pub fn bgfx_calc_texture_size(
        _info: *mut bgfx_texture_info_t,
        _width: u16,
        _height: u16,
        _depth: u16,
        _cubeMap: bool,
        _hasMips: bool,
        _numLayers: u16,
        _format: bgfx_texture_format_t,
    );
}
extern "C" {
    pub fn bgfx_create_texture(
        _mem: *const bgfx_memory_t,
        _flags: u64,
        _skip: u8,
        _info: *mut bgfx_texture_info_t,
    ) -> bgfx_texture_handle_t;
}
extern "C" {
    pub fn bgfx_create_texture_2d(
        _width: u16,
        _height: u16,
        _hasMips: bool,
        _numLayers: u16,
        _format: bgfx_texture_format_t,
        _flags: u64,
        _mem: *const bgfx_memory_t,
    ) -> bgfx_texture_handle_t;
}
extern "C" {
    pub fn bgfx_create_texture_2d_scaled(
        _ratio: bgfx_backbuffer_ratio_t,
        _hasMips: bool,
        _numLayers: u16,
        _format: bgfx_texture_format_t,
        _flags: u64,
    ) -> bgfx_texture_handle_t;
}
extern "C" {
    pub fn bgfx_create_texture_3d(
        _width: u16,
        _height: u16,
        _depth: u16,
        _hasMips: bool,
        _format: bgfx_texture_format_t,
        _flags: u64,
        _mem: *const bgfx_memory_t,
    ) -> bgfx_texture_handle_t;
}
extern "C" {
    pub fn bgfx_create_texture_cube(
        _size: u16,
        _hasMips: bool,
        _numLayers: u16,
        _format: bgfx_texture_format_t,
        _flags: u64,
        _mem: *const bgfx_memory_t,
    ) -> bgfx_texture_handle_t;
}
extern "C" {
    pub fn bgfx_update_texture_2d(
        _handle: bgfx_texture_handle_t,
        _layer: u16,
        _mip: u8,
        _x: u16,
        _y: u16,
        _width: u16,
        _height: u16,
        _mem: *const bgfx_memory_t,
        _pitch: u16,
    );
}
extern "C" {
    pub fn bgfx_update_texture_3d(
        _handle: bgfx_texture_handle_t,
        _mip: u8,
        _x: u16,
        _y: u16,
        _z: u16,
        _width: u16,
        _height: u16,
        _depth: u16,
        _mem: *const bgfx_memory_t,
    );
}
extern "C" {
    pub fn bgfx_update_texture_cube(
        _handle: bgfx_texture_handle_t,
        _layer: u16,
        _side: u8,
        _mip: u8,
        _x: u16,
        _y: u16,
        _width: u16,
        _height: u16,
        _mem: *const bgfx_memory_t,
        _pitch: u16,
    );
}
extern "C" {
    pub fn bgfx_read_texture(
        _handle: bgfx_texture_handle_t,
        _data: *mut ::std::os::raw::c_void,
        _mip: u8,
    ) -> u32;
}
extern "C" {
    pub fn bgfx_set_texture_name(
        _handle: bgfx_texture_handle_t,
        _name: *const ::std::os::raw::c_char,
        _len: i32,
    );
}
extern "C" {
    pub fn bgfx_get_direct_access_ptr(
        _handle: bgfx_texture_handle_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn bgfx_destroy_texture(_handle: bgfx_texture_handle_t);
}
extern "C" {
    pub fn bgfx_create_frame_buffer(
        _width: u16,
        _height: u16,
        _format: bgfx_texture_format_t,
        _textureFlags: u64,
    ) -> bgfx_frame_buffer_handle_t;
}
extern "C" {
    pub fn bgfx_create_frame_buffer_scaled(
        _ratio: bgfx_backbuffer_ratio_t,
        _format: bgfx_texture_format_t,
        _textureFlags: u64,
    ) -> bgfx_frame_buffer_handle_t;
}
extern "C" {
    pub fn bgfx_create_frame_buffer_from_handles(
        _num: u8,
        _handles: *const bgfx_texture_handle_t,
        _destroyTexture: bool,
    ) -> bgfx_frame_buffer_handle_t;
}
extern "C" {
    pub fn bgfx_create_frame_buffer_from_attachment(
        _num: u8,
        _attachment: *const bgfx_attachment_t,
        _destroyTexture: bool,
    ) -> bgfx_frame_buffer_handle_t;
}
extern "C" {
    pub fn bgfx_create_frame_buffer_from_nwh(
        _nwh: *mut ::std::os::raw::c_void,
        _width: u16,
        _height: u16,
        _format: bgfx_texture_format_t,
        _depthFormat: bgfx_texture_format_t,
    ) -> bgfx_frame_buffer_handle_t;
}
extern "C" {
    pub fn bgfx_set_frame_buffer_name(
        _handle: bgfx_frame_buffer_handle_t,
        _name: *const ::std::os::raw::c_char,
        _len: i32,
    );
}
extern "C" {
    pub fn bgfx_get_texture(
        _handle: bgfx_frame_buffer_handle_t,
        _attachment: u8,
    ) -> bgfx_texture_handle_t;
}
extern "C" {
    pub fn bgfx_destroy_frame_buffer(_handle: bgfx_frame_buffer_handle_t);
}
extern "C" {
    pub fn bgfx_create_uniform(
        _name: *const ::std::os::raw::c_char,
        _type: bgfx_uniform_type_t,
        _num: u16,
    ) -> bgfx_uniform_handle_t;
}
extern "C" {
    pub fn bgfx_get_uniform_info(_handle: bgfx_uniform_handle_t, _info: *mut bgfx_uniform_info_t);
}
extern "C" {
    pub fn bgfx_destroy_uniform(_handle: bgfx_uniform_handle_t);
}
extern "C" {
    pub fn bgfx_create_occlusion_query() -> bgfx_occlusion_query_handle_t;
}
extern "C" {
    pub fn bgfx_get_result(
        _handle: bgfx_occlusion_query_handle_t,
        _result: *mut i32,
    ) -> bgfx_occlusion_query_result_t;
}
extern "C" {
    pub fn bgfx_destroy_occlusion_query(_handle: bgfx_occlusion_query_handle_t);
}
extern "C" {
    pub fn bgfx_set_palette_color(_index: u8, _rgba: *const f32);
}
extern "C" {
    pub fn bgfx_set_palette_color_rgba8(_index: u8, _rgba: u32);
}
extern "C" {
    pub fn bgfx_set_view_name(_id: bgfx_view_id_t, _name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn bgfx_set_view_rect(_id: bgfx_view_id_t, _x: u16, _y: u16, _width: u16, _height: u16);
}
extern "C" {
    pub fn bgfx_set_view_rect_ratio(
        _id: bgfx_view_id_t,
        _x: u16,
        _y: u16,
        _ratio: bgfx_backbuffer_ratio_t,
    );
}
extern "C" {
    pub fn bgfx_set_view_scissor(_id: bgfx_view_id_t, _x: u16, _y: u16, _width: u16, _height: u16);
}
extern "C" {
    pub fn bgfx_set_view_clear(
        _id: bgfx_view_id_t,
        _flags: u16,
        _rgba: u32,
        _depth: f32,
        _stencil: u8,
    );
}
extern "C" {
    pub fn bgfx_set_view_clear_mrt(
        _id: bgfx_view_id_t,
        _flags: u16,
        _depth: f32,
        _stencil: u8,
        _c0: u8,
        _c1: u8,
        _c2: u8,
        _c3: u8,
        _c4: u8,
        _c5: u8,
        _c6: u8,
        _c7: u8,
    );
}
extern "C" {
    pub fn bgfx_set_view_mode(_id: bgfx_view_id_t, _mode: bgfx_view_mode_t);
}
extern "C" {
    pub fn bgfx_set_view_frame_buffer(_id: bgfx_view_id_t, _handle: bgfx_frame_buffer_handle_t);
}
extern "C" {
    pub fn bgfx_set_view_transform(
        _id: bgfx_view_id_t,
        _view: *const ::std::os::raw::c_void,
        _proj: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn bgfx_set_view_order(_id: bgfx_view_id_t, _num: u16, _order: *const bgfx_view_id_t);
}
extern "C" {
    pub fn bgfx_encoder_begin(_forThread: bool) -> *mut bgfx_encoder_t;
}
extern "C" {
    pub fn bgfx_encoder_end(_encoder: *mut bgfx_encoder_t);
}
extern "C" {
    pub fn bgfx_encoder_set_marker(
        _this: *mut bgfx_encoder_t,
        _marker: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn bgfx_encoder_set_state(_this: *mut bgfx_encoder_t, _state: u64, _rgba: u32);
}
extern "C" {
    pub fn bgfx_encoder_set_condition(
        _this: *mut bgfx_encoder_t,
        _handle: bgfx_occlusion_query_handle_t,
        _visible: bool,
    );
}
extern "C" {
    pub fn bgfx_encoder_set_stencil(_this: *mut bgfx_encoder_t, _fstencil: u32, _bstencil: u32);
}
extern "C" {
    pub fn bgfx_encoder_set_scissor(
        _this: *mut bgfx_encoder_t,
        _x: u16,
        _y: u16,
        _width: u16,
        _height: u16,
    ) -> u16;
}
extern "C" {
    pub fn bgfx_encoder_set_scissor_cached(_this: *mut bgfx_encoder_t, _cache: u16);
}
extern "C" {
    pub fn bgfx_encoder_set_transform(
        _this: *mut bgfx_encoder_t,
        _mtx: *const ::std::os::raw::c_void,
        _num: u16,
    ) -> u32;
}
extern "C" {
    pub fn bgfx_encoder_set_transform_cached(_this: *mut bgfx_encoder_t, _cache: u32, _num: u16);
}
extern "C" {
    pub fn bgfx_encoder_alloc_transform(
        _this: *mut bgfx_encoder_t,
        _transform: *mut bgfx_transform_t,
        _num: u16,
    ) -> u32;
}
extern "C" {
    pub fn bgfx_encoder_set_uniform(
        _this: *mut bgfx_encoder_t,
        _handle: bgfx_uniform_handle_t,
        _value: *const ::std::os::raw::c_void,
        _num: u16,
    );
}
extern "C" {
    pub fn bgfx_encoder_set_index_buffer(
        _this: *mut bgfx_encoder_t,
        _handle: bgfx_index_buffer_handle_t,
        _firstIndex: u32,
        _numIndices: u32,
    );
}
extern "C" {
    pub fn bgfx_encoder_set_dynamic_index_buffer(
        _this: *mut bgfx_encoder_t,
        _handle: bgfx_dynamic_index_buffer_handle_t,
        _firstIndex: u32,
        _numIndices: u32,
    );
}
extern "C" {
    pub fn bgfx_encoder_set_transient_index_buffer(
        _this: *mut bgfx_encoder_t,
        _tib: *const bgfx_transient_index_buffer_t,
        _firstIndex: u32,
        _numIndices: u32,
    );
}
extern "C" {
    pub fn bgfx_encoder_set_vertex_buffer(
        _this: *mut bgfx_encoder_t,
        _stream: u8,
        _handle: bgfx_vertex_buffer_handle_t,
        _startVertex: u32,
        _numVertices: u32,
        _declHandle: bgfx_vertex_decl_handle_t,
    );
}
extern "C" {
    pub fn bgfx_encoder_set_dynamic_vertex_buffer(
        _this: *mut bgfx_encoder_t,
        _stream: u8,
        _handle: bgfx_dynamic_vertex_buffer_handle_t,
        _startVertex: u32,
        _numVertices: u32,
        _declHandle: bgfx_vertex_decl_handle_t,
    );
}
extern "C" {
    pub fn bgfx_encoder_set_transient_vertex_buffer(
        _this: *mut bgfx_encoder_t,
        _stream: u8,
        _tvb: *const bgfx_transient_vertex_buffer_t,
        _startVertex: u32,
        _numVertices: u32,
        _declHandle: bgfx_vertex_decl_handle_t,
    );
}
extern "C" {
    pub fn bgfx_encoder_set_vertex_count(_this: *mut bgfx_encoder_t, _numVertices: u32);
}
extern "C" {
    pub fn bgfx_encoder_set_instance_data_buffer(
        _this: *mut bgfx_encoder_t,
        _idb: *const bgfx_instance_data_buffer_t,
        _start: u32,
        _num: u32,
    );
}
extern "C" {
    pub fn bgfx_encoder_set_instance_data_from_vertex_buffer(
        _this: *mut bgfx_encoder_t,
        _handle: bgfx_vertex_buffer_handle_t,
        _startVertex: u32,
        _num: u32,
    );
}
extern "C" {
    pub fn bgfx_encoder_set_instance_data_from_dynamic_vertex_buffer(
        _this: *mut bgfx_encoder_t,
        _handle: bgfx_dynamic_vertex_buffer_handle_t,
        _startVertex: u32,
        _num: u32,
    );
}
extern "C" {
    pub fn bgfx_encoder_set_instance_count(_this: *mut bgfx_encoder_t, _numInstances: u32);
}
extern "C" {
    pub fn bgfx_encoder_set_texture(
        _this: *mut bgfx_encoder_t,
        _stage: u8,
        _sampler: bgfx_uniform_handle_t,
        _handle: bgfx_texture_handle_t,
        _flags: u32,
    );
}
extern "C" {
    pub fn bgfx_encoder_touch(_this: *mut bgfx_encoder_t, _id: bgfx_view_id_t);
}
extern "C" {
    pub fn bgfx_encoder_submit(
        _this: *mut bgfx_encoder_t,
        _id: bgfx_view_id_t,
        _program: bgfx_program_handle_t,
        _depth: u32,
        _preserveState: bool,
    );
}
extern "C" {
    pub fn bgfx_encoder_submit_occlusion_query(
        _this: *mut bgfx_encoder_t,
        _id: bgfx_view_id_t,
        _program: bgfx_program_handle_t,
        _occlusionQuery: bgfx_occlusion_query_handle_t,
        _depth: u32,
        _preserveState: bool,
    );
}
extern "C" {
    pub fn bgfx_encoder_submit_indirect(
        _this: *mut bgfx_encoder_t,
        _id: bgfx_view_id_t,
        _program: bgfx_program_handle_t,
        _indirectHandle: bgfx_indirect_buffer_handle_t,
        _start: u16,
        _num: u16,
        _depth: u32,
        _preserveState: bool,
    );
}
extern "C" {
    pub fn bgfx_encoder_set_compute_index_buffer(
        _this: *mut bgfx_encoder_t,
        _stage: u8,
        _handle: bgfx_index_buffer_handle_t,
        _access: bgfx_access_t,
    );
}
extern "C" {
    pub fn bgfx_encoder_set_compute_vertex_buffer(
        _this: *mut bgfx_encoder_t,
        _stage: u8,
        _handle: bgfx_vertex_buffer_handle_t,
        _access: bgfx_access_t,
    );
}
extern "C" {
    pub fn bgfx_encoder_set_compute_dynamic_index_buffer(
        _this: *mut bgfx_encoder_t,
        _stage: u8,
        _handle: bgfx_dynamic_index_buffer_handle_t,
        _access: bgfx_access_t,
    );
}
extern "C" {
    pub fn bgfx_encoder_set_compute_dynamic_vertex_buffer(
        _this: *mut bgfx_encoder_t,
        _stage: u8,
        _handle: bgfx_dynamic_vertex_buffer_handle_t,
        _access: bgfx_access_t,
    );
}
extern "C" {
    pub fn bgfx_encoder_set_compute_indirect_buffer(
        _this: *mut bgfx_encoder_t,
        _stage: u8,
        _handle: bgfx_indirect_buffer_handle_t,
        _access: bgfx_access_t,
    );
}
extern "C" {
    pub fn bgfx_encoder_set_image(
        _this: *mut bgfx_encoder_t,
        _stage: u8,
        _handle: bgfx_texture_handle_t,
        _mip: u8,
        _access: bgfx_access_t,
        _format: bgfx_texture_format_t,
    );
}
extern "C" {
    pub fn bgfx_encoder_dispatch(
        _this: *mut bgfx_encoder_t,
        _id: bgfx_view_id_t,
        _program: bgfx_program_handle_t,
        _numX: u32,
        _numY: u32,
        _numZ: u32,
    );
}
extern "C" {
    pub fn bgfx_encoder_dispatch_indirect(
        _this: *mut bgfx_encoder_t,
        _id: bgfx_view_id_t,
        _program: bgfx_program_handle_t,
        _indirectHandle: bgfx_indirect_buffer_handle_t,
        _start: u16,
        _num: u16,
    );
}
extern "C" {
    pub fn bgfx_encoder_discard(_this: *mut bgfx_encoder_t);
}
extern "C" {
    pub fn bgfx_encoder_blit(
        _this: *mut bgfx_encoder_t,
        _id: bgfx_view_id_t,
        _dst: bgfx_texture_handle_t,
        _dstMip: u8,
        _dstX: u16,
        _dstY: u16,
        _dstZ: u16,
        _src: bgfx_texture_handle_t,
        _srcMip: u8,
        _srcX: u16,
        _srcY: u16,
        _srcZ: u16,
        _width: u16,
        _height: u16,
        _depth: u16,
    );
}
extern "C" {
    pub fn bgfx_request_screen_shot(
        _handle: bgfx_frame_buffer_handle_t,
        _filePath: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn bgfx_render_frame(_msecs: i32) -> bgfx_render_frame_t;
}
extern "C" {
    pub fn bgfx_set_platform_data(_data: *const bgfx_platform_data_t);
}
extern "C" {
    pub fn bgfx_get_internal_data() -> *const bgfx_internal_data_t;
}
extern "C" {
    pub fn bgfx_override_internal_texture_ptr(_handle: bgfx_texture_handle_t, _ptr: usize)
        -> usize;
}
extern "C" {
    pub fn bgfx_override_internal_texture(
        _handle: bgfx_texture_handle_t,
        _width: u16,
        _height: u16,
        _numMips: u8,
        _format: bgfx_texture_format_t,
        _flags: u64,
    ) -> usize;
}
extern "C" {
    pub fn bgfx_set_marker(_marker: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn bgfx_set_state(_state: u64, _rgba: u32);
}
extern "C" {
    pub fn bgfx_set_condition(_handle: bgfx_occlusion_query_handle_t, _visible: bool);
}
extern "C" {
    pub fn bgfx_set_stencil(_fstencil: u32, _bstencil: u32);
}
extern "C" {
    pub fn bgfx_set_scissor(_x: u16, _y: u16, _width: u16, _height: u16) -> u16;
}
extern "C" {
    pub fn bgfx_set_scissor_cached(_cache: u16);
}
extern "C" {
    pub fn bgfx_set_transform(_mtx: *const ::std::os::raw::c_void, _num: u16) -> u32;
}
extern "C" {
    pub fn bgfx_set_transform_cached(_cache: u32, _num: u16);
}
extern "C" {
    pub fn bgfx_alloc_transform(_transform: *mut bgfx_transform_t, _num: u16) -> u32;
}
extern "C" {
    pub fn bgfx_set_uniform(
        _handle: bgfx_uniform_handle_t,
        _value: *const ::std::os::raw::c_void,
        _num: u16,
    );
}
extern "C" {
    pub fn bgfx_set_index_buffer(
        _handle: bgfx_index_buffer_handle_t,
        _firstIndex: u32,
        _numIndices: u32,
    );
}
extern "C" {
    pub fn bgfx_set_dynamic_index_buffer(
        _handle: bgfx_dynamic_index_buffer_handle_t,
        _firstIndex: u32,
        _numIndices: u32,
    );
}
extern "C" {
    pub fn bgfx_set_transient_index_buffer(
        _tib: *const bgfx_transient_index_buffer_t,
        _firstIndex: u32,
        _numIndices: u32,
    );
}
extern "C" {
    pub fn bgfx_set_vertex_buffer(
        _stream: u8,
        _handle: bgfx_vertex_buffer_handle_t,
        _startVertex: u32,
        _numVertices: u32,
    );
}
extern "C" {
    pub fn bgfx_set_dynamic_vertex_buffer(
        _stream: u8,
        _handle: bgfx_dynamic_vertex_buffer_handle_t,
        _startVertex: u32,
        _numVertices: u32,
    );
}
extern "C" {
    pub fn bgfx_set_transient_vertex_buffer(
        _stream: u8,
        _tvb: *const bgfx_transient_vertex_buffer_t,
        _startVertex: u32,
        _numVertices: u32,
    );
}
extern "C" {
    pub fn bgfx_set_vertex_count(_numVertices: u32);
}
extern "C" {
    pub fn bgfx_set_instance_data_buffer(
        _idb: *const bgfx_instance_data_buffer_t,
        _start: u32,
        _num: u32,
    );
}
extern "C" {
    pub fn bgfx_set_instance_data_from_vertex_buffer(
        _handle: bgfx_vertex_buffer_handle_t,
        _startVertex: u32,
        _num: u32,
    );
}
extern "C" {
    pub fn bgfx_set_instance_data_from_dynamic_vertex_buffer(
        _handle: bgfx_dynamic_vertex_buffer_handle_t,
        _startVertex: u32,
        _num: u32,
    );
}
extern "C" {
    pub fn bgfx_set_instance_count(_numInstances: u32);
}
extern "C" {
    pub fn bgfx_set_texture(
        _stage: u8,
        _sampler: bgfx_uniform_handle_t,
        _handle: bgfx_texture_handle_t,
        _flags: u32,
    );
}
extern "C" {
    pub fn bgfx_touch(_id: bgfx_view_id_t);
}
extern "C" {
    pub fn bgfx_submit(
        _id: bgfx_view_id_t,
        _program: bgfx_program_handle_t,
        _depth: u32,
        _preserveState: bool,
    );
}
extern "C" {
    pub fn bgfx_submit_occlusion_query(
        _id: bgfx_view_id_t,
        _program: bgfx_program_handle_t,
        _occlusionQuery: bgfx_occlusion_query_handle_t,
        _depth: u32,
        _preserveState: bool,
    );
}
extern "C" {
    pub fn bgfx_submit_indirect(
        _id: bgfx_view_id_t,
        _program: bgfx_program_handle_t,
        _indirectHandle: bgfx_indirect_buffer_handle_t,
        _start: u16,
        _num: u16,
        _depth: u32,
        _preserveState: bool,
    );
}
extern "C" {
    pub fn bgfx_set_compute_index_buffer(
        _stage: u8,
        _handle: bgfx_index_buffer_handle_t,
        _access: bgfx_access_t,
    );
}
extern "C" {
    pub fn bgfx_set_compute_vertex_buffer(
        _stage: u8,
        _handle: bgfx_vertex_buffer_handle_t,
        _access: bgfx_access_t,
    );
}
extern "C" {
    pub fn bgfx_set_compute_dynamic_index_buffer(
        _stage: u8,
        _handle: bgfx_dynamic_index_buffer_handle_t,
        _access: bgfx_access_t,
    );
}
extern "C" {
    pub fn bgfx_set_compute_dynamic_vertex_buffer(
        _stage: u8,
        _handle: bgfx_dynamic_vertex_buffer_handle_t,
        _access: bgfx_access_t,
    );
}
extern "C" {
    pub fn bgfx_set_compute_indirect_buffer(
        _stage: u8,
        _handle: bgfx_indirect_buffer_handle_t,
        _access: bgfx_access_t,
    );
}
extern "C" {
    pub fn bgfx_set_image(
        _stage: u8,
        _handle: bgfx_texture_handle_t,
        _mip: u8,
        _access: bgfx_access_t,
        _format: bgfx_texture_format_t,
    );
}
extern "C" {
    pub fn bgfx_dispatch(
        _id: bgfx_view_id_t,
        _program: bgfx_program_handle_t,
        _numX: u32,
        _numY: u32,
        _numZ: u32,
    );
}
extern "C" {
    pub fn bgfx_dispatch_indirect(
        _id: bgfx_view_id_t,
        _program: bgfx_program_handle_t,
        _indirectHandle: bgfx_indirect_buffer_handle_t,
        _start: u16,
        _num: u16,
    );
}
extern "C" {
    pub fn bgfx_discard();
}
extern "C" {
    pub fn bgfx_blit(
        _id: bgfx_view_id_t,
        _dst: bgfx_texture_handle_t,
        _dstMip: u8,
        _dstX: u16,
        _dstY: u16,
        _dstZ: u16,
        _src: bgfx_texture_handle_t,
        _srcMip: u8,
        _srcX: u16,
        _srcY: u16,
        _srcZ: u16,
        _width: u16,
        _height: u16,
        _depth: u16,
    );
}
pub const BGFX_FUNCTION_ID_ATTACHMENT_INIT: bgfx_function_id = 0;
pub const BGFX_FUNCTION_ID_VERTEX_DECL_BEGIN: bgfx_function_id = 1;
pub const BGFX_FUNCTION_ID_VERTEX_DECL_ADD: bgfx_function_id = 2;
pub const BGFX_FUNCTION_ID_VERTEX_DECL_DECODE: bgfx_function_id = 3;
pub const BGFX_FUNCTION_ID_VERTEX_DECL_HAS: bgfx_function_id = 4;
pub const BGFX_FUNCTION_ID_VERTEX_DECL_SKIP: bgfx_function_id = 5;
pub const BGFX_FUNCTION_ID_VERTEX_DECL_END: bgfx_function_id = 6;
pub const BGFX_FUNCTION_ID_VERTEX_PACK: bgfx_function_id = 7;
pub const BGFX_FUNCTION_ID_VERTEX_UNPACK: bgfx_function_id = 8;
pub const BGFX_FUNCTION_ID_VERTEX_CONVERT: bgfx_function_id = 9;
pub const BGFX_FUNCTION_ID_WELD_VERTICES: bgfx_function_id = 10;
pub const BGFX_FUNCTION_ID_TOPOLOGY_CONVERT: bgfx_function_id = 11;
pub const BGFX_FUNCTION_ID_TOPOLOGY_SORT_TRI_LIST: bgfx_function_id = 12;
pub const BGFX_FUNCTION_ID_GET_SUPPORTED_RENDERERS: bgfx_function_id = 13;
pub const BGFX_FUNCTION_ID_GET_RENDERER_NAME: bgfx_function_id = 14;
pub const BGFX_FUNCTION_ID_INIT_CTOR: bgfx_function_id = 15;
pub const BGFX_FUNCTION_ID_INIT: bgfx_function_id = 16;
pub const BGFX_FUNCTION_ID_SHUTDOWN: bgfx_function_id = 17;
pub const BGFX_FUNCTION_ID_RESET: bgfx_function_id = 18;
pub const BGFX_FUNCTION_ID_FRAME: bgfx_function_id = 19;
pub const BGFX_FUNCTION_ID_GET_RENDERER_TYPE: bgfx_function_id = 20;
pub const BGFX_FUNCTION_ID_GET_CAPS: bgfx_function_id = 21;
pub const BGFX_FUNCTION_ID_GET_STATS: bgfx_function_id = 22;
pub const BGFX_FUNCTION_ID_ALLOC: bgfx_function_id = 23;
pub const BGFX_FUNCTION_ID_COPY: bgfx_function_id = 24;
pub const BGFX_FUNCTION_ID_MAKE_REF: bgfx_function_id = 25;
pub const BGFX_FUNCTION_ID_MAKE_REF_RELEASE: bgfx_function_id = 26;
pub const BGFX_FUNCTION_ID_SET_DEBUG: bgfx_function_id = 27;
pub const BGFX_FUNCTION_ID_DBG_TEXT_CLEAR: bgfx_function_id = 28;
pub const BGFX_FUNCTION_ID_DBG_TEXT_PRINTF: bgfx_function_id = 29;
pub const BGFX_FUNCTION_ID_DBG_TEXT_VPRINTF: bgfx_function_id = 30;
pub const BGFX_FUNCTION_ID_DBG_TEXT_IMAGE: bgfx_function_id = 31;
pub const BGFX_FUNCTION_ID_CREATE_INDEX_BUFFER: bgfx_function_id = 32;
pub const BGFX_FUNCTION_ID_SET_INDEX_BUFFER_NAME: bgfx_function_id = 33;
pub const BGFX_FUNCTION_ID_DESTROY_INDEX_BUFFER: bgfx_function_id = 34;
pub const BGFX_FUNCTION_ID_CREATE_VERTEX_DECL: bgfx_function_id = 35;
pub const BGFX_FUNCTION_ID_DESTROY_VERTEX_DECL: bgfx_function_id = 36;
pub const BGFX_FUNCTION_ID_CREATE_VERTEX_BUFFER: bgfx_function_id = 37;
pub const BGFX_FUNCTION_ID_SET_VERTEX_BUFFER_NAME: bgfx_function_id = 38;
pub const BGFX_FUNCTION_ID_DESTROY_VERTEX_BUFFER: bgfx_function_id = 39;
pub const BGFX_FUNCTION_ID_CREATE_DYNAMIC_INDEX_BUFFER: bgfx_function_id = 40;
pub const BGFX_FUNCTION_ID_CREATE_DYNAMIC_INDEX_BUFFER_MEM: bgfx_function_id = 41;
pub const BGFX_FUNCTION_ID_UPDATE_DYNAMIC_INDEX_BUFFER: bgfx_function_id = 42;
pub const BGFX_FUNCTION_ID_DESTROY_DYNAMIC_INDEX_BUFFER: bgfx_function_id = 43;
pub const BGFX_FUNCTION_ID_CREATE_DYNAMIC_VERTEX_BUFFER: bgfx_function_id = 44;
pub const BGFX_FUNCTION_ID_CREATE_DYNAMIC_VERTEX_BUFFER_MEM: bgfx_function_id = 45;
pub const BGFX_FUNCTION_ID_UPDATE_DYNAMIC_VERTEX_BUFFER: bgfx_function_id = 46;
pub const BGFX_FUNCTION_ID_DESTROY_DYNAMIC_VERTEX_BUFFER: bgfx_function_id = 47;
pub const BGFX_FUNCTION_ID_GET_AVAIL_TRANSIENT_INDEX_BUFFER: bgfx_function_id = 48;
pub const BGFX_FUNCTION_ID_GET_AVAIL_TRANSIENT_VERTEX_BUFFER: bgfx_function_id = 49;
pub const BGFX_FUNCTION_ID_GET_AVAIL_INSTANCE_DATA_BUFFER: bgfx_function_id = 50;
pub const BGFX_FUNCTION_ID_ALLOC_TRANSIENT_INDEX_BUFFER: bgfx_function_id = 51;
pub const BGFX_FUNCTION_ID_ALLOC_TRANSIENT_VERTEX_BUFFER: bgfx_function_id = 52;
pub const BGFX_FUNCTION_ID_ALLOC_TRANSIENT_BUFFERS: bgfx_function_id = 53;
pub const BGFX_FUNCTION_ID_ALLOC_INSTANCE_DATA_BUFFER: bgfx_function_id = 54;
pub const BGFX_FUNCTION_ID_CREATE_INDIRECT_BUFFER: bgfx_function_id = 55;
pub const BGFX_FUNCTION_ID_DESTROY_INDIRECT_BUFFER: bgfx_function_id = 56;
pub const BGFX_FUNCTION_ID_CREATE_SHADER: bgfx_function_id = 57;
pub const BGFX_FUNCTION_ID_GET_SHADER_UNIFORMS: bgfx_function_id = 58;
pub const BGFX_FUNCTION_ID_SET_SHADER_NAME: bgfx_function_id = 59;
pub const BGFX_FUNCTION_ID_DESTROY_SHADER: bgfx_function_id = 60;
pub const BGFX_FUNCTION_ID_CREATE_PROGRAM: bgfx_function_id = 61;
pub const BGFX_FUNCTION_ID_CREATE_COMPUTE_PROGRAM: bgfx_function_id = 62;
pub const BGFX_FUNCTION_ID_DESTROY_PROGRAM: bgfx_function_id = 63;
pub const BGFX_FUNCTION_ID_IS_TEXTURE_VALID: bgfx_function_id = 64;
pub const BGFX_FUNCTION_ID_CALC_TEXTURE_SIZE: bgfx_function_id = 65;
pub const BGFX_FUNCTION_ID_CREATE_TEXTURE: bgfx_function_id = 66;
pub const BGFX_FUNCTION_ID_CREATE_TEXTURE_2D: bgfx_function_id = 67;
pub const BGFX_FUNCTION_ID_CREATE_TEXTURE_2D_SCALED: bgfx_function_id = 68;
pub const BGFX_FUNCTION_ID_CREATE_TEXTURE_3D: bgfx_function_id = 69;
pub const BGFX_FUNCTION_ID_CREATE_TEXTURE_CUBE: bgfx_function_id = 70;
pub const BGFX_FUNCTION_ID_UPDATE_TEXTURE_2D: bgfx_function_id = 71;
pub const BGFX_FUNCTION_ID_UPDATE_TEXTURE_3D: bgfx_function_id = 72;
pub const BGFX_FUNCTION_ID_UPDATE_TEXTURE_CUBE: bgfx_function_id = 73;
pub const BGFX_FUNCTION_ID_READ_TEXTURE: bgfx_function_id = 74;
pub const BGFX_FUNCTION_ID_SET_TEXTURE_NAME: bgfx_function_id = 75;
pub const BGFX_FUNCTION_ID_GET_DIRECT_ACCESS_PTR: bgfx_function_id = 76;
pub const BGFX_FUNCTION_ID_DESTROY_TEXTURE: bgfx_function_id = 77;
pub const BGFX_FUNCTION_ID_CREATE_FRAME_BUFFER: bgfx_function_id = 78;
pub const BGFX_FUNCTION_ID_CREATE_FRAME_BUFFER_SCALED: bgfx_function_id = 79;
pub const BGFX_FUNCTION_ID_CREATE_FRAME_BUFFER_FROM_HANDLES: bgfx_function_id = 80;
pub const BGFX_FUNCTION_ID_CREATE_FRAME_BUFFER_FROM_ATTACHMENT: bgfx_function_id = 81;
pub const BGFX_FUNCTION_ID_CREATE_FRAME_BUFFER_FROM_NWH: bgfx_function_id = 82;
pub const BGFX_FUNCTION_ID_SET_FRAME_BUFFER_NAME: bgfx_function_id = 83;
pub const BGFX_FUNCTION_ID_GET_TEXTURE: bgfx_function_id = 84;
pub const BGFX_FUNCTION_ID_DESTROY_FRAME_BUFFER: bgfx_function_id = 85;
pub const BGFX_FUNCTION_ID_CREATE_UNIFORM: bgfx_function_id = 86;
pub const BGFX_FUNCTION_ID_GET_UNIFORM_INFO: bgfx_function_id = 87;
pub const BGFX_FUNCTION_ID_DESTROY_UNIFORM: bgfx_function_id = 88;
pub const BGFX_FUNCTION_ID_CREATE_OCCLUSION_QUERY: bgfx_function_id = 89;
pub const BGFX_FUNCTION_ID_GET_RESULT: bgfx_function_id = 90;
pub const BGFX_FUNCTION_ID_DESTROY_OCCLUSION_QUERY: bgfx_function_id = 91;
pub const BGFX_FUNCTION_ID_SET_PALETTE_COLOR: bgfx_function_id = 92;
pub const BGFX_FUNCTION_ID_SET_PALETTE_COLOR_RGBA8: bgfx_function_id = 93;
pub const BGFX_FUNCTION_ID_SET_VIEW_NAME: bgfx_function_id = 94;
pub const BGFX_FUNCTION_ID_SET_VIEW_RECT: bgfx_function_id = 95;
pub const BGFX_FUNCTION_ID_SET_VIEW_RECT_RATIO: bgfx_function_id = 96;
pub const BGFX_FUNCTION_ID_SET_VIEW_SCISSOR: bgfx_function_id = 97;
pub const BGFX_FUNCTION_ID_SET_VIEW_CLEAR: bgfx_function_id = 98;
pub const BGFX_FUNCTION_ID_SET_VIEW_CLEAR_MRT: bgfx_function_id = 99;
pub const BGFX_FUNCTION_ID_SET_VIEW_MODE: bgfx_function_id = 100;
pub const BGFX_FUNCTION_ID_SET_VIEW_FRAME_BUFFER: bgfx_function_id = 101;
pub const BGFX_FUNCTION_ID_SET_VIEW_TRANSFORM: bgfx_function_id = 102;
pub const BGFX_FUNCTION_ID_SET_VIEW_ORDER: bgfx_function_id = 103;
pub const BGFX_FUNCTION_ID_ENCODER_BEGIN: bgfx_function_id = 104;
pub const BGFX_FUNCTION_ID_ENCODER_END: bgfx_function_id = 105;
pub const BGFX_FUNCTION_ID_ENCODER_SET_MARKER: bgfx_function_id = 106;
pub const BGFX_FUNCTION_ID_ENCODER_SET_STATE: bgfx_function_id = 107;
pub const BGFX_FUNCTION_ID_ENCODER_SET_CONDITION: bgfx_function_id = 108;
pub const BGFX_FUNCTION_ID_ENCODER_SET_STENCIL: bgfx_function_id = 109;
pub const BGFX_FUNCTION_ID_ENCODER_SET_SCISSOR: bgfx_function_id = 110;
pub const BGFX_FUNCTION_ID_ENCODER_SET_SCISSOR_CACHED: bgfx_function_id = 111;
pub const BGFX_FUNCTION_ID_ENCODER_SET_TRANSFORM: bgfx_function_id = 112;
pub const BGFX_FUNCTION_ID_ENCODER_SET_TRANSFORM_CACHED: bgfx_function_id = 113;
pub const BGFX_FUNCTION_ID_ENCODER_ALLOC_TRANSFORM: bgfx_function_id = 114;
pub const BGFX_FUNCTION_ID_ENCODER_SET_UNIFORM: bgfx_function_id = 115;
pub const BGFX_FUNCTION_ID_ENCODER_SET_INDEX_BUFFER: bgfx_function_id = 116;
pub const BGFX_FUNCTION_ID_ENCODER_SET_DYNAMIC_INDEX_BUFFER: bgfx_function_id = 117;
pub const BGFX_FUNCTION_ID_ENCODER_SET_TRANSIENT_INDEX_BUFFER: bgfx_function_id = 118;
pub const BGFX_FUNCTION_ID_ENCODER_SET_VERTEX_BUFFER: bgfx_function_id = 119;
pub const BGFX_FUNCTION_ID_ENCODER_SET_DYNAMIC_VERTEX_BUFFER: bgfx_function_id = 120;
pub const BGFX_FUNCTION_ID_ENCODER_SET_TRANSIENT_VERTEX_BUFFER: bgfx_function_id = 121;
pub const BGFX_FUNCTION_ID_ENCODER_SET_VERTEX_COUNT: bgfx_function_id = 122;
pub const BGFX_FUNCTION_ID_ENCODER_SET_INSTANCE_DATA_BUFFER: bgfx_function_id = 123;
pub const BGFX_FUNCTION_ID_ENCODER_SET_INSTANCE_DATA_FROM_VERTEX_BUFFER: bgfx_function_id = 124;
pub const BGFX_FUNCTION_ID_ENCODER_SET_INSTANCE_DATA_FROM_DYNAMIC_VERTEX_BUFFER: bgfx_function_id =
    125;
pub const BGFX_FUNCTION_ID_ENCODER_SET_INSTANCE_COUNT: bgfx_function_id = 126;
pub const BGFX_FUNCTION_ID_ENCODER_SET_TEXTURE: bgfx_function_id = 127;
pub const BGFX_FUNCTION_ID_ENCODER_TOUCH: bgfx_function_id = 128;
pub const BGFX_FUNCTION_ID_ENCODER_SUBMIT: bgfx_function_id = 129;
pub const BGFX_FUNCTION_ID_ENCODER_SUBMIT_OCCLUSION_QUERY: bgfx_function_id = 130;
pub const BGFX_FUNCTION_ID_ENCODER_SUBMIT_INDIRECT: bgfx_function_id = 131;
pub const BGFX_FUNCTION_ID_ENCODER_SET_COMPUTE_INDEX_BUFFER: bgfx_function_id = 132;
pub const BGFX_FUNCTION_ID_ENCODER_SET_COMPUTE_VERTEX_BUFFER: bgfx_function_id = 133;
pub const BGFX_FUNCTION_ID_ENCODER_SET_COMPUTE_DYNAMIC_INDEX_BUFFER: bgfx_function_id = 134;
pub const BGFX_FUNCTION_ID_ENCODER_SET_COMPUTE_DYNAMIC_VERTEX_BUFFER: bgfx_function_id = 135;
pub const BGFX_FUNCTION_ID_ENCODER_SET_COMPUTE_INDIRECT_BUFFER: bgfx_function_id = 136;
pub const BGFX_FUNCTION_ID_ENCODER_SET_IMAGE: bgfx_function_id = 137;
pub const BGFX_FUNCTION_ID_ENCODER_DISPATCH: bgfx_function_id = 138;
pub const BGFX_FUNCTION_ID_ENCODER_DISPATCH_INDIRECT: bgfx_function_id = 139;
pub const BGFX_FUNCTION_ID_ENCODER_DISCARD: bgfx_function_id = 140;
pub const BGFX_FUNCTION_ID_ENCODER_BLIT: bgfx_function_id = 141;
pub const BGFX_FUNCTION_ID_REQUEST_SCREEN_SHOT: bgfx_function_id = 142;
pub const BGFX_FUNCTION_ID_RENDER_FRAME: bgfx_function_id = 143;
pub const BGFX_FUNCTION_ID_SET_PLATFORM_DATA: bgfx_function_id = 144;
pub const BGFX_FUNCTION_ID_GET_INTERNAL_DATA: bgfx_function_id = 145;
pub const BGFX_FUNCTION_ID_OVERRIDE_INTERNAL_TEXTURE_PTR: bgfx_function_id = 146;
pub const BGFX_FUNCTION_ID_OVERRIDE_INTERNAL_TEXTURE: bgfx_function_id = 147;
pub const BGFX_FUNCTION_ID_SET_MARKER: bgfx_function_id = 148;
pub const BGFX_FUNCTION_ID_SET_STATE: bgfx_function_id = 149;
pub const BGFX_FUNCTION_ID_SET_CONDITION: bgfx_function_id = 150;
pub const BGFX_FUNCTION_ID_SET_STENCIL: bgfx_function_id = 151;
pub const BGFX_FUNCTION_ID_SET_SCISSOR: bgfx_function_id = 152;
pub const BGFX_FUNCTION_ID_SET_SCISSOR_CACHED: bgfx_function_id = 153;
pub const BGFX_FUNCTION_ID_SET_TRANSFORM: bgfx_function_id = 154;
pub const BGFX_FUNCTION_ID_SET_TRANSFORM_CACHED: bgfx_function_id = 155;
pub const BGFX_FUNCTION_ID_ALLOC_TRANSFORM: bgfx_function_id = 156;
pub const BGFX_FUNCTION_ID_SET_UNIFORM: bgfx_function_id = 157;
pub const BGFX_FUNCTION_ID_SET_INDEX_BUFFER: bgfx_function_id = 158;
pub const BGFX_FUNCTION_ID_SET_DYNAMIC_INDEX_BUFFER: bgfx_function_id = 159;
pub const BGFX_FUNCTION_ID_SET_TRANSIENT_INDEX_BUFFER: bgfx_function_id = 160;
pub const BGFX_FUNCTION_ID_SET_VERTEX_BUFFER: bgfx_function_id = 161;
pub const BGFX_FUNCTION_ID_SET_DYNAMIC_VERTEX_BUFFER: bgfx_function_id = 162;
pub const BGFX_FUNCTION_ID_SET_TRANSIENT_VERTEX_BUFFER: bgfx_function_id = 163;
pub const BGFX_FUNCTION_ID_SET_VERTEX_COUNT: bgfx_function_id = 164;
pub const BGFX_FUNCTION_ID_SET_INSTANCE_DATA_BUFFER: bgfx_function_id = 165;
pub const BGFX_FUNCTION_ID_SET_INSTANCE_DATA_FROM_VERTEX_BUFFER: bgfx_function_id = 166;
pub const BGFX_FUNCTION_ID_SET_INSTANCE_DATA_FROM_DYNAMIC_VERTEX_BUFFER: bgfx_function_id = 167;
pub const BGFX_FUNCTION_ID_SET_INSTANCE_COUNT: bgfx_function_id = 168;
pub const BGFX_FUNCTION_ID_SET_TEXTURE: bgfx_function_id = 169;
pub const BGFX_FUNCTION_ID_TOUCH: bgfx_function_id = 170;
pub const BGFX_FUNCTION_ID_SUBMIT: bgfx_function_id = 171;
pub const BGFX_FUNCTION_ID_SUBMIT_OCCLUSION_QUERY: bgfx_function_id = 172;
pub const BGFX_FUNCTION_ID_SUBMIT_INDIRECT: bgfx_function_id = 173;
pub const BGFX_FUNCTION_ID_SET_COMPUTE_INDEX_BUFFER: bgfx_function_id = 174;
pub const BGFX_FUNCTION_ID_SET_COMPUTE_VERTEX_BUFFER: bgfx_function_id = 175;
pub const BGFX_FUNCTION_ID_SET_COMPUTE_DYNAMIC_INDEX_BUFFER: bgfx_function_id = 176;
pub const BGFX_FUNCTION_ID_SET_COMPUTE_DYNAMIC_VERTEX_BUFFER: bgfx_function_id = 177;
pub const BGFX_FUNCTION_ID_SET_COMPUTE_INDIRECT_BUFFER: bgfx_function_id = 178;
pub const BGFX_FUNCTION_ID_SET_IMAGE: bgfx_function_id = 179;
pub const BGFX_FUNCTION_ID_DISPATCH: bgfx_function_id = 180;
pub const BGFX_FUNCTION_ID_DISPATCH_INDIRECT: bgfx_function_id = 181;
pub const BGFX_FUNCTION_ID_DISCARD: bgfx_function_id = 182;
pub const BGFX_FUNCTION_ID_BLIT: bgfx_function_id = 183;
pub const BGFX_FUNCTION_ID_COUNT: bgfx_function_id = 184;
pub type bgfx_function_id = i32;
pub use self::bgfx_function_id as bgfx_function_id_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bgfx_interface_vtbl {
    pub attachment_init: ::std::option::Option<
        unsafe extern "C" fn(
            _this: *mut bgfx_attachment_t,
            _handle: bgfx_texture_handle_t,
            _access: bgfx_access_t,
            _layer: u16,
            _mip: u16,
            _resolve: u8,
        ),
    >,
    pub vertex_decl_begin: ::std::option::Option<
        unsafe extern "C" fn(
            _this: *mut bgfx_vertex_decl_t,
            _rendererType: bgfx_renderer_type_t,
        ) -> *mut bgfx_vertex_decl_t,
    >,
    pub vertex_decl_add: ::std::option::Option<
        unsafe extern "C" fn(
            _this: *mut bgfx_vertex_decl_t,
            _attrib: bgfx_attrib_t,
            _num: u8,
            _type: bgfx_attrib_type_t,
            _normalized: bool,
            _asInt: bool,
        ) -> *mut bgfx_vertex_decl_t,
    >,
    pub vertex_decl_decode: ::std::option::Option<
        unsafe extern "C" fn(
            _this: *const bgfx_vertex_decl_t,
            _attrib: bgfx_attrib_t,
            _num: *mut u8,
            _type: *mut bgfx_attrib_type_t,
            _normalized: *mut bool,
            _asInt: *mut bool,
        ),
    >,
    pub vertex_decl_has: ::std::option::Option<
        unsafe extern "C" fn(_this: *const bgfx_vertex_decl_t, _attrib: bgfx_attrib_t) -> bool,
    >,
    pub vertex_decl_skip: ::std::option::Option<
        unsafe extern "C" fn(_this: *mut bgfx_vertex_decl_t, _num: u8) -> *mut bgfx_vertex_decl_t,
    >,
    pub vertex_decl_end:
        ::std::option::Option<unsafe extern "C" fn(_this: *mut bgfx_vertex_decl_t)>,
    pub vertex_pack: ::std::option::Option<
        unsafe extern "C" fn(
            _input: *const f32,
            _inputNormalized: bool,
            _attr: bgfx_attrib_t,
            _decl: *const bgfx_vertex_decl_t,
            _data: *mut ::std::os::raw::c_void,
            _index: u32,
        ),
    >,
    pub vertex_unpack: ::std::option::Option<
        unsafe extern "C" fn(
            _output: *mut f32,
            _attr: bgfx_attrib_t,
            _decl: *const bgfx_vertex_decl_t,
            _data: *const ::std::os::raw::c_void,
            _index: u32,
        ),
    >,
    pub vertex_convert: ::std::option::Option<
        unsafe extern "C" fn(
            _dstDecl: *const bgfx_vertex_decl_t,
            _dstData: *mut ::std::os::raw::c_void,
            _srcDecl: *const bgfx_vertex_decl_t,
            _srcData: *const ::std::os::raw::c_void,
            _num: u32,
        ),
    >,
    pub weld_vertices: ::std::option::Option<
        unsafe extern "C" fn(
            _output: *mut u16,
            _decl: *const bgfx_vertex_decl_t,
            _data: *const ::std::os::raw::c_void,
            _num: u16,
            _epsilon: f32,
        ) -> u16,
    >,
    pub topology_convert: ::std::option::Option<
        unsafe extern "C" fn(
            _conversion: bgfx_topology_convert_t,
            _dst: *mut ::std::os::raw::c_void,
            _dstSize: u32,
            _indices: *const ::std::os::raw::c_void,
            _numIndices: u32,
            _index32: bool,
        ) -> u32,
    >,
    pub topology_sort_tri_list: ::std::option::Option<
        unsafe extern "C" fn(
            _sort: bgfx_topology_sort_t,
            _dst: *mut ::std::os::raw::c_void,
            _dstSize: u32,
            _dir: *const f32,
            _pos: *const f32,
            _vertices: *const ::std::os::raw::c_void,
            _stride: u32,
            _indices: *const ::std::os::raw::c_void,
            _numIndices: u32,
            _index32: bool,
        ),
    >,
    pub get_supported_renderers: ::std::option::Option<
        unsafe extern "C" fn(_max: u8, _enum: *mut bgfx_renderer_type_t) -> u8,
    >,
    pub get_renderer_name: ::std::option::Option<
        unsafe extern "C" fn(_type: bgfx_renderer_type_t) -> *const ::std::os::raw::c_char,
    >,
    pub init_ctor: ::std::option::Option<unsafe extern "C" fn(_init: *mut bgfx_init_t)>,
    pub init: ::std::option::Option<unsafe extern "C" fn(_init: *const bgfx_init_t) -> bool>,
    pub shutdown: ::std::option::Option<unsafe extern "C" fn()>,
    pub reset: ::std::option::Option<
        unsafe extern "C" fn(
            _width: u32,
            _height: u32,
            _flags: u32,
            _format: bgfx_texture_format_t,
        ),
    >,
    pub frame: ::std::option::Option<unsafe extern "C" fn(_capture: bool) -> u32>,
    pub get_renderer_type: ::std::option::Option<unsafe extern "C" fn() -> bgfx_renderer_type_t>,
    pub get_caps: ::std::option::Option<unsafe extern "C" fn() -> *const bgfx_caps_t>,
    pub get_stats: ::std::option::Option<unsafe extern "C" fn() -> *const bgfx_stats_t>,
    pub alloc: ::std::option::Option<unsafe extern "C" fn(_size: u32) -> *const bgfx_memory_t>,
    pub copy: ::std::option::Option<
        unsafe extern "C" fn(
            _data: *const ::std::os::raw::c_void,
            _size: u32,
        ) -> *const bgfx_memory_t,
    >,
    pub make_ref: ::std::option::Option<
        unsafe extern "C" fn(
            _data: *const ::std::os::raw::c_void,
            _size: u32,
        ) -> *const bgfx_memory_t,
    >,
    pub make_ref_release: ::std::option::Option<
        unsafe extern "C" fn(
            _data: *const ::std::os::raw::c_void,
            _size: u32,
            _releaseFn: bgfx_release_fn_t,
            _userData: *mut ::std::os::raw::c_void,
        ) -> *const bgfx_memory_t,
    >,
    pub set_debug: ::std::option::Option<unsafe extern "C" fn(_debug: u32)>,
    pub dbg_text_clear: ::std::option::Option<unsafe extern "C" fn(_attr: u8, _small: bool)>,
    pub dbg_text_printf: ::std::option::Option<
        unsafe extern "C" fn(
            _x: u16,
            _y: u16,
            _attr: u8,
            _format: *const ::std::os::raw::c_char,
            ...
        ),
    >,
    pub dbg_text_vprintf: ::std::option::Option<
        unsafe extern "C" fn(
            _x: u16,
            _y: u16,
            _attr: u8,
            _format: *const ::std::os::raw::c_char,
            _argList: va_list,
        ),
    >,
    pub dbg_text_image: ::std::option::Option<
        unsafe extern "C" fn(
            _x: u16,
            _y: u16,
            _width: u16,
            _height: u16,
            _data: *const ::std::os::raw::c_void,
            _pitch: u16,
        ),
    >,
    pub create_index_buffer: ::std::option::Option<
        unsafe extern "C" fn(_mem: *const bgfx_memory_t, _flags: u16) -> bgfx_index_buffer_handle_t,
    >,
    pub set_index_buffer_name: ::std::option::Option<
        unsafe extern "C" fn(
            _handle: bgfx_index_buffer_handle_t,
            _name: *const ::std::os::raw::c_char,
            _len: i32,
        ),
    >,
    pub destroy_index_buffer:
        ::std::option::Option<unsafe extern "C" fn(_handle: bgfx_index_buffer_handle_t)>,
    pub create_vertex_decl: ::std::option::Option<
        unsafe extern "C" fn(_decl: *const bgfx_vertex_decl_t) -> bgfx_vertex_decl_handle_t,
    >,
    pub destroy_vertex_decl:
        ::std::option::Option<unsafe extern "C" fn(_handle: bgfx_vertex_decl_handle_t)>,
    pub create_vertex_buffer: ::std::option::Option<
        unsafe extern "C" fn(
            _mem: *const bgfx_memory_t,
            _decl: *const bgfx_vertex_decl_t,
            _flags: u16,
        ) -> bgfx_vertex_buffer_handle_t,
    >,
    pub set_vertex_buffer_name: ::std::option::Option<
        unsafe extern "C" fn(
            _handle: bgfx_vertex_buffer_handle_t,
            _name: *const ::std::os::raw::c_char,
            _len: i32,
        ),
    >,
    pub destroy_vertex_buffer:
        ::std::option::Option<unsafe extern "C" fn(_handle: bgfx_vertex_buffer_handle_t)>,
    pub create_dynamic_index_buffer: ::std::option::Option<
        unsafe extern "C" fn(_num: u32, _flags: u16) -> bgfx_dynamic_index_buffer_handle_t,
    >,
    pub create_dynamic_index_buffer_mem: ::std::option::Option<
        unsafe extern "C" fn(
            _mem: *const bgfx_memory_t,
            _flags: u16,
        ) -> bgfx_dynamic_index_buffer_handle_t,
    >,
    pub update_dynamic_index_buffer: ::std::option::Option<
        unsafe extern "C" fn(
            _handle: bgfx_dynamic_index_buffer_handle_t,
            _startIndex: u32,
            _mem: *const bgfx_memory_t,
        ),
    >,
    pub destroy_dynamic_index_buffer:
        ::std::option::Option<unsafe extern "C" fn(_handle: bgfx_dynamic_index_buffer_handle_t)>,
    pub create_dynamic_vertex_buffer: ::std::option::Option<
        unsafe extern "C" fn(
            _num: u32,
            _decl: *const bgfx_vertex_decl_t,
            _flags: u16,
        ) -> bgfx_dynamic_vertex_buffer_handle_t,
    >,
    pub create_dynamic_vertex_buffer_mem: ::std::option::Option<
        unsafe extern "C" fn(
            _mem: *const bgfx_memory_t,
            _decl: *const bgfx_vertex_decl_t,
            _flags: u16,
        ) -> bgfx_dynamic_vertex_buffer_handle_t,
    >,
    pub update_dynamic_vertex_buffer: ::std::option::Option<
        unsafe extern "C" fn(
            _handle: bgfx_dynamic_vertex_buffer_handle_t,
            _startVertex: u32,
            _mem: *const bgfx_memory_t,
        ),
    >,
    pub destroy_dynamic_vertex_buffer:
        ::std::option::Option<unsafe extern "C" fn(_handle: bgfx_dynamic_vertex_buffer_handle_t)>,
    pub get_avail_transient_index_buffer:
        ::std::option::Option<unsafe extern "C" fn(_num: u32) -> u32>,
    pub get_avail_transient_vertex_buffer: ::std::option::Option<
        unsafe extern "C" fn(_num: u32, _decl: *const bgfx_vertex_decl_t) -> u32,
    >,
    pub get_avail_instance_data_buffer:
        ::std::option::Option<unsafe extern "C" fn(_num: u32, _stride: u16) -> u32>,
    pub alloc_transient_index_buffer: ::std::option::Option<
        unsafe extern "C" fn(_tib: *mut bgfx_transient_index_buffer_t, _num: u32),
    >,
    pub alloc_transient_vertex_buffer: ::std::option::Option<
        unsafe extern "C" fn(
            _tvb: *mut bgfx_transient_vertex_buffer_t,
            _num: u32,
            _decl: *const bgfx_vertex_decl_t,
        ),
    >,
    pub alloc_transient_buffers: ::std::option::Option<
        unsafe extern "C" fn(
            _tvb: *mut bgfx_transient_vertex_buffer_t,
            _decl: *const bgfx_vertex_decl_t,
            _numVertices: u32,
            _tib: *mut bgfx_transient_index_buffer_t,
            _numIndices: u32,
        ) -> bool,
    >,
    pub alloc_instance_data_buffer: ::std::option::Option<
        unsafe extern "C" fn(_idb: *mut bgfx_instance_data_buffer_t, _num: u32, _stride: u16),
    >,
    pub create_indirect_buffer:
        ::std::option::Option<unsafe extern "C" fn(_num: u32) -> bgfx_indirect_buffer_handle_t>,
    pub destroy_indirect_buffer:
        ::std::option::Option<unsafe extern "C" fn(_handle: bgfx_indirect_buffer_handle_t)>,
    pub create_shader: ::std::option::Option<
        unsafe extern "C" fn(_mem: *const bgfx_memory_t) -> bgfx_shader_handle_t,
    >,
    pub get_shader_uniforms: ::std::option::Option<
        unsafe extern "C" fn(
            _handle: bgfx_shader_handle_t,
            _uniforms: *mut bgfx_uniform_handle_t,
            _max: u16,
        ) -> u16,
    >,
    pub set_shader_name: ::std::option::Option<
        unsafe extern "C" fn(
            _handle: bgfx_shader_handle_t,
            _name: *const ::std::os::raw::c_char,
            _len: i32,
        ),
    >,
    pub destroy_shader: ::std::option::Option<unsafe extern "C" fn(_handle: bgfx_shader_handle_t)>,
    pub create_program: ::std::option::Option<
        unsafe extern "C" fn(
            _vsh: bgfx_shader_handle_t,
            _fsh: bgfx_shader_handle_t,
            _destroyShaders: bool,
        ) -> bgfx_program_handle_t,
    >,
    pub create_compute_program: ::std::option::Option<
        unsafe extern "C" fn(
            _csh: bgfx_shader_handle_t,
            _destroyShaders: bool,
        ) -> bgfx_program_handle_t,
    >,
    pub destroy_program:
        ::std::option::Option<unsafe extern "C" fn(_handle: bgfx_program_handle_t)>,
    pub is_texture_valid: ::std::option::Option<
        unsafe extern "C" fn(
            _depth: u16,
            _cubeMap: bool,
            _numLayers: u16,
            _format: bgfx_texture_format_t,
            _flags: u64,
        ) -> bool,
    >,
    pub calc_texture_size: ::std::option::Option<
        unsafe extern "C" fn(
            _info: *mut bgfx_texture_info_t,
            _width: u16,
            _height: u16,
            _depth: u16,
            _cubeMap: bool,
            _hasMips: bool,
            _numLayers: u16,
            _format: bgfx_texture_format_t,
        ),
    >,
    pub create_texture: ::std::option::Option<
        unsafe extern "C" fn(
            _mem: *const bgfx_memory_t,
            _flags: u64,
            _skip: u8,
            _info: *mut bgfx_texture_info_t,
        ) -> bgfx_texture_handle_t,
    >,
    pub create_texture_2d: ::std::option::Option<
        unsafe extern "C" fn(
            _width: u16,
            _height: u16,
            _hasMips: bool,
            _numLayers: u16,
            _format: bgfx_texture_format_t,
            _flags: u64,
            _mem: *const bgfx_memory_t,
        ) -> bgfx_texture_handle_t,
    >,
    pub create_texture_2d_scaled: ::std::option::Option<
        unsafe extern "C" fn(
            _ratio: bgfx_backbuffer_ratio_t,
            _hasMips: bool,
            _numLayers: u16,
            _format: bgfx_texture_format_t,
            _flags: u64,
        ) -> bgfx_texture_handle_t,
    >,
    pub create_texture_3d: ::std::option::Option<
        unsafe extern "C" fn(
            _width: u16,
            _height: u16,
            _depth: u16,
            _hasMips: bool,
            _format: bgfx_texture_format_t,
            _flags: u64,
            _mem: *const bgfx_memory_t,
        ) -> bgfx_texture_handle_t,
    >,
    pub create_texture_cube: ::std::option::Option<
        unsafe extern "C" fn(
            _size: u16,
            _hasMips: bool,
            _numLayers: u16,
            _format: bgfx_texture_format_t,
            _flags: u64,
            _mem: *const bgfx_memory_t,
        ) -> bgfx_texture_handle_t,
    >,
    pub update_texture_2d: ::std::option::Option<
        unsafe extern "C" fn(
            _handle: bgfx_texture_handle_t,
            _layer: u16,
            _mip: u8,
            _x: u16,
            _y: u16,
            _width: u16,
            _height: u16,
            _mem: *const bgfx_memory_t,
            _pitch: u16,
        ),
    >,
    pub update_texture_3d: ::std::option::Option<
        unsafe extern "C" fn(
            _handle: bgfx_texture_handle_t,
            _mip: u8,
            _x: u16,
            _y: u16,
            _z: u16,
            _width: u16,
            _height: u16,
            _depth: u16,
            _mem: *const bgfx_memory_t,
        ),
    >,
    pub update_texture_cube: ::std::option::Option<
        unsafe extern "C" fn(
            _handle: bgfx_texture_handle_t,
            _layer: u16,
            _side: u8,
            _mip: u8,
            _x: u16,
            _y: u16,
            _width: u16,
            _height: u16,
            _mem: *const bgfx_memory_t,
            _pitch: u16,
        ),
    >,
    pub read_texture: ::std::option::Option<
        unsafe extern "C" fn(
            _handle: bgfx_texture_handle_t,
            _data: *mut ::std::os::raw::c_void,
            _mip: u8,
        ) -> u32,
    >,
    pub set_texture_name: ::std::option::Option<
        unsafe extern "C" fn(
            _handle: bgfx_texture_handle_t,
            _name: *const ::std::os::raw::c_char,
            _len: i32,
        ),
    >,
    pub get_direct_access_ptr: ::std::option::Option<
        unsafe extern "C" fn(_handle: bgfx_texture_handle_t) -> *mut ::std::os::raw::c_void,
    >,
    pub destroy_texture:
        ::std::option::Option<unsafe extern "C" fn(_handle: bgfx_texture_handle_t)>,
    pub create_frame_buffer: ::std::option::Option<
        unsafe extern "C" fn(
            _width: u16,
            _height: u16,
            _format: bgfx_texture_format_t,
            _textureFlags: u64,
        ) -> bgfx_frame_buffer_handle_t,
    >,
    pub create_frame_buffer_scaled: ::std::option::Option<
        unsafe extern "C" fn(
            _ratio: bgfx_backbuffer_ratio_t,
            _format: bgfx_texture_format_t,
            _textureFlags: u64,
        ) -> bgfx_frame_buffer_handle_t,
    >,
    pub create_frame_buffer_from_handles: ::std::option::Option<
        unsafe extern "C" fn(
            _num: u8,
            _handles: *const bgfx_texture_handle_t,
            _destroyTexture: bool,
        ) -> bgfx_frame_buffer_handle_t,
    >,
    pub create_frame_buffer_from_attachment: ::std::option::Option<
        unsafe extern "C" fn(
            _num: u8,
            _attachment: *const bgfx_attachment_t,
            _destroyTexture: bool,
        ) -> bgfx_frame_buffer_handle_t,
    >,
    pub create_frame_buffer_from_nwh: ::std::option::Option<
        unsafe extern "C" fn(
            _nwh: *mut ::std::os::raw::c_void,
            _width: u16,
            _height: u16,
            _format: bgfx_texture_format_t,
            _depthFormat: bgfx_texture_format_t,
        ) -> bgfx_frame_buffer_handle_t,
    >,
    pub set_frame_buffer_name: ::std::option::Option<
        unsafe extern "C" fn(
            _handle: bgfx_frame_buffer_handle_t,
            _name: *const ::std::os::raw::c_char,
            _len: i32,
        ),
    >,
    pub get_texture: ::std::option::Option<
        unsafe extern "C" fn(
            _handle: bgfx_frame_buffer_handle_t,
            _attachment: u8,
        ) -> bgfx_texture_handle_t,
    >,
    pub destroy_frame_buffer:
        ::std::option::Option<unsafe extern "C" fn(_handle: bgfx_frame_buffer_handle_t)>,
    pub create_uniform: ::std::option::Option<
        unsafe extern "C" fn(
            _name: *const ::std::os::raw::c_char,
            _type: bgfx_uniform_type_t,
            _num: u16,
        ) -> bgfx_uniform_handle_t,
    >,
    pub get_uniform_info: ::std::option::Option<
        unsafe extern "C" fn(_handle: bgfx_uniform_handle_t, _info: *mut bgfx_uniform_info_t),
    >,
    pub destroy_uniform:
        ::std::option::Option<unsafe extern "C" fn(_handle: bgfx_uniform_handle_t)>,
    pub create_occlusion_query:
        ::std::option::Option<unsafe extern "C" fn() -> bgfx_occlusion_query_handle_t>,
    pub get_result: ::std::option::Option<
        unsafe extern "C" fn(
            _handle: bgfx_occlusion_query_handle_t,
            _result: *mut i32,
        ) -> bgfx_occlusion_query_result_t,
    >,
    pub destroy_occlusion_query:
        ::std::option::Option<unsafe extern "C" fn(_handle: bgfx_occlusion_query_handle_t)>,
    pub set_palette_color:
        ::std::option::Option<unsafe extern "C" fn(_index: u8, _rgba: *const f32)>,
    pub set_palette_color_rgba8:
        ::std::option::Option<unsafe extern "C" fn(_index: u8, _rgba: u32)>,
    pub set_view_name: ::std::option::Option<
        unsafe extern "C" fn(_id: bgfx_view_id_t, _name: *const ::std::os::raw::c_char),
    >,
    pub set_view_rect: ::std::option::Option<
        unsafe extern "C" fn(_id: bgfx_view_id_t, _x: u16, _y: u16, _width: u16, _height: u16),
    >,
    pub set_view_rect_ratio: ::std::option::Option<
        unsafe extern "C" fn(
            _id: bgfx_view_id_t,
            _x: u16,
            _y: u16,
            _ratio: bgfx_backbuffer_ratio_t,
        ),
    >,
    pub set_view_scissor: ::std::option::Option<
        unsafe extern "C" fn(_id: bgfx_view_id_t, _x: u16, _y: u16, _width: u16, _height: u16),
    >,
    pub set_view_clear: ::std::option::Option<
        unsafe extern "C" fn(
            _id: bgfx_view_id_t,
            _flags: u16,
            _rgba: u32,
            _depth: f32,
            _stencil: u8,
        ),
    >,
    pub set_view_clear_mrt: ::std::option::Option<
        unsafe extern "C" fn(
            _id: bgfx_view_id_t,
            _flags: u16,
            _depth: f32,
            _stencil: u8,
            _c0: u8,
            _c1: u8,
            _c2: u8,
            _c3: u8,
            _c4: u8,
            _c5: u8,
            _c6: u8,
            _c7: u8,
        ),
    >,
    pub set_view_mode:
        ::std::option::Option<unsafe extern "C" fn(_id: bgfx_view_id_t, _mode: bgfx_view_mode_t)>,
    pub set_view_frame_buffer: ::std::option::Option<
        unsafe extern "C" fn(_id: bgfx_view_id_t, _handle: bgfx_frame_buffer_handle_t),
    >,
    pub set_view_transform: ::std::option::Option<
        unsafe extern "C" fn(
            _id: bgfx_view_id_t,
            _view: *const ::std::os::raw::c_void,
            _proj: *const ::std::os::raw::c_void,
        ),
    >,
    pub set_view_order: ::std::option::Option<
        unsafe extern "C" fn(_id: bgfx_view_id_t, _num: u16, _order: *const bgfx_view_id_t),
    >,
    pub encoder_begin:
        ::std::option::Option<unsafe extern "C" fn(_forThread: bool) -> *mut bgfx_encoder_t>,
    pub encoder_end: ::std::option::Option<unsafe extern "C" fn(_encoder: *mut bgfx_encoder_t)>,
    pub encoder_set_marker: ::std::option::Option<
        unsafe extern "C" fn(_this: *mut bgfx_encoder_t, _marker: *const ::std::os::raw::c_char),
    >,
    pub encoder_set_state: ::std::option::Option<
        unsafe extern "C" fn(_this: *mut bgfx_encoder_t, _state: u64, _rgba: u32),
    >,
    pub encoder_set_condition: ::std::option::Option<
        unsafe extern "C" fn(
            _this: *mut bgfx_encoder_t,
            _handle: bgfx_occlusion_query_handle_t,
            _visible: bool,
        ),
    >,
    pub encoder_set_stencil: ::std::option::Option<
        unsafe extern "C" fn(_this: *mut bgfx_encoder_t, _fstencil: u32, _bstencil: u32),
    >,
    pub encoder_set_scissor: ::std::option::Option<
        unsafe extern "C" fn(
            _this: *mut bgfx_encoder_t,
            _x: u16,
            _y: u16,
            _width: u16,
            _height: u16,
        ) -> u16,
    >,
    pub encoder_set_scissor_cached:
        ::std::option::Option<unsafe extern "C" fn(_this: *mut bgfx_encoder_t, _cache: u16)>,
    pub encoder_set_transform: ::std::option::Option<
        unsafe extern "C" fn(
            _this: *mut bgfx_encoder_t,
            _mtx: *const ::std::os::raw::c_void,
            _num: u16,
        ) -> u32,
    >,
    pub encoder_set_transform_cached: ::std::option::Option<
        unsafe extern "C" fn(_this: *mut bgfx_encoder_t, _cache: u32, _num: u16),
    >,
    pub encoder_alloc_transform: ::std::option::Option<
        unsafe extern "C" fn(
            _this: *mut bgfx_encoder_t,
            _transform: *mut bgfx_transform_t,
            _num: u16,
        ) -> u32,
    >,
    pub encoder_set_uniform: ::std::option::Option<
        unsafe extern "C" fn(
            _this: *mut bgfx_encoder_t,
            _handle: bgfx_uniform_handle_t,
            _value: *const ::std::os::raw::c_void,
            _num: u16,
        ),
    >,
    pub encoder_set_index_buffer: ::std::option::Option<
        unsafe extern "C" fn(
            _this: *mut bgfx_encoder_t,
            _handle: bgfx_index_buffer_handle_t,
            _firstIndex: u32,
            _numIndices: u32,
        ),
    >,
    pub encoder_set_dynamic_index_buffer: ::std::option::Option<
        unsafe extern "C" fn(
            _this: *mut bgfx_encoder_t,
            _handle: bgfx_dynamic_index_buffer_handle_t,
            _firstIndex: u32,
            _numIndices: u32,
        ),
    >,
    pub encoder_set_transient_index_buffer: ::std::option::Option<
        unsafe extern "C" fn(
            _this: *mut bgfx_encoder_t,
            _tib: *const bgfx_transient_index_buffer_t,
            _firstIndex: u32,
            _numIndices: u32,
        ),
    >,
    pub encoder_set_vertex_buffer: ::std::option::Option<
        unsafe extern "C" fn(
            _this: *mut bgfx_encoder_t,
            _stream: u8,
            _handle: bgfx_vertex_buffer_handle_t,
            _startVertex: u32,
            _numVertices: u32,
            _declHandle: bgfx_vertex_decl_handle_t,
        ),
    >,
    pub encoder_set_dynamic_vertex_buffer: ::std::option::Option<
        unsafe extern "C" fn(
            _this: *mut bgfx_encoder_t,
            _stream: u8,
            _handle: bgfx_dynamic_vertex_buffer_handle_t,
            _startVertex: u32,
            _numVertices: u32,
            _declHandle: bgfx_vertex_decl_handle_t,
        ),
    >,
    pub encoder_set_transient_vertex_buffer: ::std::option::Option<
        unsafe extern "C" fn(
            _this: *mut bgfx_encoder_t,
            _stream: u8,
            _tvb: *const bgfx_transient_vertex_buffer_t,
            _startVertex: u32,
            _numVertices: u32,
            _declHandle: bgfx_vertex_decl_handle_t,
        ),
    >,
    pub encoder_set_vertex_count:
        ::std::option::Option<unsafe extern "C" fn(_this: *mut bgfx_encoder_t, _numVertices: u32)>,
    pub encoder_set_instance_data_buffer: ::std::option::Option<
        unsafe extern "C" fn(
            _this: *mut bgfx_encoder_t,
            _idb: *const bgfx_instance_data_buffer_t,
            _start: u32,
            _num: u32,
        ),
    >,
    pub encoder_set_instance_data_from_vertex_buffer: ::std::option::Option<
        unsafe extern "C" fn(
            _this: *mut bgfx_encoder_t,
            _handle: bgfx_vertex_buffer_handle_t,
            _startVertex: u32,
            _num: u32,
        ),
    >,
    pub encoder_set_instance_data_from_dynamic_vertex_buffer: ::std::option::Option<
        unsafe extern "C" fn(
            _this: *mut bgfx_encoder_t,
            _handle: bgfx_dynamic_vertex_buffer_handle_t,
            _startVertex: u32,
            _num: u32,
        ),
    >,
    pub encoder_set_instance_count:
        ::std::option::Option<unsafe extern "C" fn(_this: *mut bgfx_encoder_t, _numInstances: u32)>,
    pub encoder_set_texture: ::std::option::Option<
        unsafe extern "C" fn(
            _this: *mut bgfx_encoder_t,
            _stage: u8,
            _sampler: bgfx_uniform_handle_t,
            _handle: bgfx_texture_handle_t,
            _flags: u32,
        ),
    >,
    pub encoder_touch: ::std::option::Option<
        unsafe extern "C" fn(_this: *mut bgfx_encoder_t, _id: bgfx_view_id_t),
    >,
    pub encoder_submit: ::std::option::Option<
        unsafe extern "C" fn(
            _this: *mut bgfx_encoder_t,
            _id: bgfx_view_id_t,
            _program: bgfx_program_handle_t,
            _depth: u32,
            _preserveState: bool,
        ),
    >,
    pub encoder_submit_occlusion_query: ::std::option::Option<
        unsafe extern "C" fn(
            _this: *mut bgfx_encoder_t,
            _id: bgfx_view_id_t,
            _program: bgfx_program_handle_t,
            _occlusionQuery: bgfx_occlusion_query_handle_t,
            _depth: u32,
            _preserveState: bool,
        ),
    >,
    pub encoder_submit_indirect: ::std::option::Option<
        unsafe extern "C" fn(
            _this: *mut bgfx_encoder_t,
            _id: bgfx_view_id_t,
            _program: bgfx_program_handle_t,
            _indirectHandle: bgfx_indirect_buffer_handle_t,
            _start: u16,
            _num: u16,
            _depth: u32,
            _preserveState: bool,
        ),
    >,
    pub encoder_set_compute_index_buffer: ::std::option::Option<
        unsafe extern "C" fn(
            _this: *mut bgfx_encoder_t,
            _stage: u8,
            _handle: bgfx_index_buffer_handle_t,
            _access: bgfx_access_t,
        ),
    >,
    pub encoder_set_compute_vertex_buffer: ::std::option::Option<
        unsafe extern "C" fn(
            _this: *mut bgfx_encoder_t,
            _stage: u8,
            _handle: bgfx_vertex_buffer_handle_t,
            _access: bgfx_access_t,
        ),
    >,
    pub encoder_set_compute_dynamic_index_buffer: ::std::option::Option<
        unsafe extern "C" fn(
            _this: *mut bgfx_encoder_t,
            _stage: u8,
            _handle: bgfx_dynamic_index_buffer_handle_t,
            _access: bgfx_access_t,
        ),
    >,
    pub encoder_set_compute_dynamic_vertex_buffer: ::std::option::Option<
        unsafe extern "C" fn(
            _this: *mut bgfx_encoder_t,
            _stage: u8,
            _handle: bgfx_dynamic_vertex_buffer_handle_t,
            _access: bgfx_access_t,
        ),
    >,
    pub encoder_set_compute_indirect_buffer: ::std::option::Option<
        unsafe extern "C" fn(
            _this: *mut bgfx_encoder_t,
            _stage: u8,
            _handle: bgfx_indirect_buffer_handle_t,
            _access: bgfx_access_t,
        ),
    >,
    pub encoder_set_image: ::std::option::Option<
        unsafe extern "C" fn(
            _this: *mut bgfx_encoder_t,
            _stage: u8,
            _handle: bgfx_texture_handle_t,
            _mip: u8,
            _access: bgfx_access_t,
            _format: bgfx_texture_format_t,
        ),
    >,
    pub encoder_dispatch: ::std::option::Option<
        unsafe extern "C" fn(
            _this: *mut bgfx_encoder_t,
            _id: bgfx_view_id_t,
            _program: bgfx_program_handle_t,
            _numX: u32,
            _numY: u32,
            _numZ: u32,
        ),
    >,
    pub encoder_dispatch_indirect: ::std::option::Option<
        unsafe extern "C" fn(
            _this: *mut bgfx_encoder_t,
            _id: bgfx_view_id_t,
            _program: bgfx_program_handle_t,
            _indirectHandle: bgfx_indirect_buffer_handle_t,
            _start: u16,
            _num: u16,
        ),
    >,
    pub encoder_discard: ::std::option::Option<unsafe extern "C" fn(_this: *mut bgfx_encoder_t)>,
    pub encoder_blit: ::std::option::Option<
        unsafe extern "C" fn(
            _this: *mut bgfx_encoder_t,
            _id: bgfx_view_id_t,
            _dst: bgfx_texture_handle_t,
            _dstMip: u8,
            _dstX: u16,
            _dstY: u16,
            _dstZ: u16,
            _src: bgfx_texture_handle_t,
            _srcMip: u8,
            _srcX: u16,
            _srcY: u16,
            _srcZ: u16,
            _width: u16,
            _height: u16,
            _depth: u16,
        ),
    >,
    pub request_screen_shot: ::std::option::Option<
        unsafe extern "C" fn(
            _handle: bgfx_frame_buffer_handle_t,
            _filePath: *const ::std::os::raw::c_char,
        ),
    >,
    pub render_frame:
        ::std::option::Option<unsafe extern "C" fn(_msecs: i32) -> bgfx_render_frame_t>,
    pub set_platform_data:
        ::std::option::Option<unsafe extern "C" fn(_data: *const bgfx_platform_data_t)>,
    pub get_internal_data:
        ::std::option::Option<unsafe extern "C" fn() -> *const bgfx_internal_data_t>,
    pub override_internal_texture_ptr: ::std::option::Option<
        unsafe extern "C" fn(_handle: bgfx_texture_handle_t, _ptr: usize) -> usize,
    >,
    pub override_internal_texture: ::std::option::Option<
        unsafe extern "C" fn(
            _handle: bgfx_texture_handle_t,
            _width: u16,
            _height: u16,
            _numMips: u8,
            _format: bgfx_texture_format_t,
            _flags: u64,
        ) -> usize,
    >,
    pub set_marker:
        ::std::option::Option<unsafe extern "C" fn(_marker: *const ::std::os::raw::c_char)>,
    pub set_state: ::std::option::Option<unsafe extern "C" fn(_state: u64, _rgba: u32)>,
    pub set_condition: ::std::option::Option<
        unsafe extern "C" fn(_handle: bgfx_occlusion_query_handle_t, _visible: bool),
    >,
    pub set_stencil: ::std::option::Option<unsafe extern "C" fn(_fstencil: u32, _bstencil: u32)>,
    pub set_scissor: ::std::option::Option<
        unsafe extern "C" fn(_x: u16, _y: u16, _width: u16, _height: u16) -> u16,
    >,
    pub set_scissor_cached: ::std::option::Option<unsafe extern "C" fn(_cache: u16)>,
    pub set_transform: ::std::option::Option<
        unsafe extern "C" fn(_mtx: *const ::std::os::raw::c_void, _num: u16) -> u32,
    >,
    pub set_transform_cached: ::std::option::Option<unsafe extern "C" fn(_cache: u32, _num: u16)>,
    pub alloc_transform: ::std::option::Option<
        unsafe extern "C" fn(_transform: *mut bgfx_transform_t, _num: u16) -> u32,
    >,
    pub set_uniform: ::std::option::Option<
        unsafe extern "C" fn(
            _handle: bgfx_uniform_handle_t,
            _value: *const ::std::os::raw::c_void,
            _num: u16,
        ),
    >,
    pub set_index_buffer: ::std::option::Option<
        unsafe extern "C" fn(
            _handle: bgfx_index_buffer_handle_t,
            _firstIndex: u32,
            _numIndices: u32,
        ),
    >,
    pub set_dynamic_index_buffer: ::std::option::Option<
        unsafe extern "C" fn(
            _handle: bgfx_dynamic_index_buffer_handle_t,
            _firstIndex: u32,
            _numIndices: u32,
        ),
    >,
    pub set_transient_index_buffer: ::std::option::Option<
        unsafe extern "C" fn(
            _tib: *const bgfx_transient_index_buffer_t,
            _firstIndex: u32,
            _numIndices: u32,
        ),
    >,
    pub set_vertex_buffer: ::std::option::Option<
        unsafe extern "C" fn(
            _stream: u8,
            _handle: bgfx_vertex_buffer_handle_t,
            _startVertex: u32,
            _numVertices: u32,
        ),
    >,
    pub set_dynamic_vertex_buffer: ::std::option::Option<
        unsafe extern "C" fn(
            _stream: u8,
            _handle: bgfx_dynamic_vertex_buffer_handle_t,
            _startVertex: u32,
            _numVertices: u32,
        ),
    >,
    pub set_transient_vertex_buffer: ::std::option::Option<
        unsafe extern "C" fn(
            _stream: u8,
            _tvb: *const bgfx_transient_vertex_buffer_t,
            _startVertex: u32,
            _numVertices: u32,
        ),
    >,
    pub set_vertex_count: ::std::option::Option<unsafe extern "C" fn(_numVertices: u32)>,
    pub set_instance_data_buffer: ::std::option::Option<
        unsafe extern "C" fn(_idb: *const bgfx_instance_data_buffer_t, _start: u32, _num: u32),
    >,
    pub set_instance_data_from_vertex_buffer: ::std::option::Option<
        unsafe extern "C" fn(_handle: bgfx_vertex_buffer_handle_t, _startVertex: u32, _num: u32),
    >,
    pub set_instance_data_from_dynamic_vertex_buffer: ::std::option::Option<
        unsafe extern "C" fn(
            _handle: bgfx_dynamic_vertex_buffer_handle_t,
            _startVertex: u32,
            _num: u32,
        ),
    >,
    pub set_instance_count: ::std::option::Option<unsafe extern "C" fn(_numInstances: u32)>,
    pub set_texture: ::std::option::Option<
        unsafe extern "C" fn(
            _stage: u8,
            _sampler: bgfx_uniform_handle_t,
            _handle: bgfx_texture_handle_t,
            _flags: u32,
        ),
    >,
    pub touch: ::std::option::Option<unsafe extern "C" fn(_id: bgfx_view_id_t)>,
    pub submit: ::std::option::Option<
        unsafe extern "C" fn(
            _id: bgfx_view_id_t,
            _program: bgfx_program_handle_t,
            _depth: u32,
            _preserveState: bool,
        ),
    >,
    pub submit_occlusion_query: ::std::option::Option<
        unsafe extern "C" fn(
            _id: bgfx_view_id_t,
            _program: bgfx_program_handle_t,
            _occlusionQuery: bgfx_occlusion_query_handle_t,
            _depth: u32,
            _preserveState: bool,
        ),
    >,
    pub submit_indirect: ::std::option::Option<
        unsafe extern "C" fn(
            _id: bgfx_view_id_t,
            _program: bgfx_program_handle_t,
            _indirectHandle: bgfx_indirect_buffer_handle_t,
            _start: u16,
            _num: u16,
            _depth: u32,
            _preserveState: bool,
        ),
    >,
    pub set_compute_index_buffer: ::std::option::Option<
        unsafe extern "C" fn(
            _stage: u8,
            _handle: bgfx_index_buffer_handle_t,
            _access: bgfx_access_t,
        ),
    >,
    pub set_compute_vertex_buffer: ::std::option::Option<
        unsafe extern "C" fn(
            _stage: u8,
            _handle: bgfx_vertex_buffer_handle_t,
            _access: bgfx_access_t,
        ),
    >,
    pub set_compute_dynamic_index_buffer: ::std::option::Option<
        unsafe extern "C" fn(
            _stage: u8,
            _handle: bgfx_dynamic_index_buffer_handle_t,
            _access: bgfx_access_t,
        ),
    >,
    pub set_compute_dynamic_vertex_buffer: ::std::option::Option<
        unsafe extern "C" fn(
            _stage: u8,
            _handle: bgfx_dynamic_vertex_buffer_handle_t,
            _access: bgfx_access_t,
        ),
    >,
    pub set_compute_indirect_buffer: ::std::option::Option<
        unsafe extern "C" fn(
            _stage: u8,
            _handle: bgfx_indirect_buffer_handle_t,
            _access: bgfx_access_t,
        ),
    >,
    pub set_image: ::std::option::Option<
        unsafe extern "C" fn(
            _stage: u8,
            _handle: bgfx_texture_handle_t,
            _mip: u8,
            _access: bgfx_access_t,
            _format: bgfx_texture_format_t,
        ),
    >,
    pub dispatch: ::std::option::Option<
        unsafe extern "C" fn(
            _id: bgfx_view_id_t,
            _program: bgfx_program_handle_t,
            _numX: u32,
            _numY: u32,
            _numZ: u32,
        ),
    >,
    pub dispatch_indirect: ::std::option::Option<
        unsafe extern "C" fn(
            _id: bgfx_view_id_t,
            _program: bgfx_program_handle_t,
            _indirectHandle: bgfx_indirect_buffer_handle_t,
            _start: u16,
            _num: u16,
        ),
    >,
    pub discard: ::std::option::Option<unsafe extern "C" fn()>,
    pub blit: ::std::option::Option<
        unsafe extern "C" fn(
            _id: bgfx_view_id_t,
            _dst: bgfx_texture_handle_t,
            _dstMip: u8,
            _dstX: u16,
            _dstY: u16,
            _dstZ: u16,
            _src: bgfx_texture_handle_t,
            _srcMip: u8,
            _srcX: u16,
            _srcY: u16,
            _srcZ: u16,
            _width: u16,
            _height: u16,
            _depth: u16,
        ),
    >,
}
#[test]
fn bindgen_test_layout_bgfx_interface_vtbl() {
    assert_eq!(
        ::std::mem::size_of::<bgfx_interface_vtbl>(),
        1472usize,
        concat!("Size of: ", stringify!(bgfx_interface_vtbl))
    );
    assert_eq!(
        ::std::mem::align_of::<bgfx_interface_vtbl>(),
        8usize,
        concat!("Alignment of ", stringify!(bgfx_interface_vtbl))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).attachment_init as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(attachment_init)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).vertex_decl_begin as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(vertex_decl_begin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).vertex_decl_add as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(vertex_decl_add)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).vertex_decl_decode as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(vertex_decl_decode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).vertex_decl_has as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(vertex_decl_has)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).vertex_decl_skip as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(vertex_decl_skip)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).vertex_decl_end as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(vertex_decl_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_interface_vtbl>())).vertex_pack as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(vertex_pack)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).vertex_unpack as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(vertex_unpack)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).vertex_convert as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(vertex_convert)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).weld_vertices as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(weld_vertices)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).topology_convert as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(topology_convert)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).topology_sort_tri_list as *const _
                as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(topology_sort_tri_list)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).get_supported_renderers as *const _
                as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(get_supported_renderers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).get_renderer_name as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(get_renderer_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_interface_vtbl>())).init_ctor as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(init_ctor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_interface_vtbl>())).init as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_interface_vtbl>())).shutdown as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(shutdown)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_interface_vtbl>())).reset as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(reset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_interface_vtbl>())).frame as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(frame)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).get_renderer_type as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(get_renderer_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_interface_vtbl>())).get_caps as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(get_caps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_interface_vtbl>())).get_stats as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(get_stats)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_interface_vtbl>())).alloc as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(alloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_interface_vtbl>())).copy as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(copy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_interface_vtbl>())).make_ref as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(make_ref)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).make_ref_release as *const _ as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(make_ref_release)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_interface_vtbl>())).set_debug as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(set_debug)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).dbg_text_clear as *const _ as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(dbg_text_clear)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).dbg_text_printf as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(dbg_text_printf)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).dbg_text_vprintf as *const _ as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(dbg_text_vprintf)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).dbg_text_image as *const _ as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(dbg_text_image)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).create_index_buffer as *const _ as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(create_index_buffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).set_index_buffer_name as *const _
                as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(set_index_buffer_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).destroy_index_buffer as *const _
                as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(destroy_index_buffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).create_vertex_decl as *const _ as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(create_vertex_decl)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).destroy_vertex_decl as *const _ as usize
        },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(destroy_vertex_decl)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).create_vertex_buffer as *const _
                as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(create_vertex_buffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).set_vertex_buffer_name as *const _
                as usize
        },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(set_vertex_buffer_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).destroy_vertex_buffer as *const _
                as usize
        },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(destroy_vertex_buffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).create_dynamic_index_buffer as *const _
                as usize
        },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(create_dynamic_index_buffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).create_dynamic_index_buffer_mem
                as *const _ as usize
        },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(create_dynamic_index_buffer_mem)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).update_dynamic_index_buffer as *const _
                as usize
        },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(update_dynamic_index_buffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).destroy_dynamic_index_buffer as *const _
                as usize
        },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(destroy_dynamic_index_buffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).create_dynamic_vertex_buffer as *const _
                as usize
        },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(create_dynamic_vertex_buffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).create_dynamic_vertex_buffer_mem
                as *const _ as usize
        },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(create_dynamic_vertex_buffer_mem)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).update_dynamic_vertex_buffer as *const _
                as usize
        },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(update_dynamic_vertex_buffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).destroy_dynamic_vertex_buffer
                as *const _ as usize
        },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(destroy_dynamic_vertex_buffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).get_avail_transient_index_buffer
                as *const _ as usize
        },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(get_avail_transient_index_buffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).get_avail_transient_vertex_buffer
                as *const _ as usize
        },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(get_avail_transient_vertex_buffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).get_avail_instance_data_buffer
                as *const _ as usize
        },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(get_avail_instance_data_buffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).alloc_transient_index_buffer as *const _
                as usize
        },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(alloc_transient_index_buffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).alloc_transient_vertex_buffer
                as *const _ as usize
        },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(alloc_transient_vertex_buffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).alloc_transient_buffers as *const _
                as usize
        },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(alloc_transient_buffers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).alloc_instance_data_buffer as *const _
                as usize
        },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(alloc_instance_data_buffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).create_indirect_buffer as *const _
                as usize
        },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(create_indirect_buffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).destroy_indirect_buffer as *const _
                as usize
        },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(destroy_indirect_buffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).create_shader as *const _ as usize
        },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(create_shader)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).get_shader_uniforms as *const _ as usize
        },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(get_shader_uniforms)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).set_shader_name as *const _ as usize
        },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(set_shader_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).destroy_shader as *const _ as usize
        },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(destroy_shader)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).create_program as *const _ as usize
        },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(create_program)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).create_compute_program as *const _
                as usize
        },
        496usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(create_compute_program)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).destroy_program as *const _ as usize
        },
        504usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(destroy_program)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).is_texture_valid as *const _ as usize
        },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(is_texture_valid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).calc_texture_size as *const _ as usize
        },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(calc_texture_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).create_texture as *const _ as usize
        },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(create_texture)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).create_texture_2d as *const _ as usize
        },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(create_texture_2d)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).create_texture_2d_scaled as *const _
                as usize
        },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(create_texture_2d_scaled)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).create_texture_3d as *const _ as usize
        },
        552usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(create_texture_3d)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).create_texture_cube as *const _ as usize
        },
        560usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(create_texture_cube)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).update_texture_2d as *const _ as usize
        },
        568usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(update_texture_2d)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).update_texture_3d as *const _ as usize
        },
        576usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(update_texture_3d)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).update_texture_cube as *const _ as usize
        },
        584usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(update_texture_cube)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).read_texture as *const _ as usize
        },
        592usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(read_texture)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).set_texture_name as *const _ as usize
        },
        600usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(set_texture_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).get_direct_access_ptr as *const _
                as usize
        },
        608usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(get_direct_access_ptr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).destroy_texture as *const _ as usize
        },
        616usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(destroy_texture)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).create_frame_buffer as *const _ as usize
        },
        624usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(create_frame_buffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).create_frame_buffer_scaled as *const _
                as usize
        },
        632usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(create_frame_buffer_scaled)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).create_frame_buffer_from_handles
                as *const _ as usize
        },
        640usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(create_frame_buffer_from_handles)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).create_frame_buffer_from_attachment
                as *const _ as usize
        },
        648usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(create_frame_buffer_from_attachment)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).create_frame_buffer_from_nwh as *const _
                as usize
        },
        656usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(create_frame_buffer_from_nwh)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).set_frame_buffer_name as *const _
                as usize
        },
        664usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(set_frame_buffer_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_interface_vtbl>())).get_texture as *const _ as usize },
        672usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(get_texture)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).destroy_frame_buffer as *const _
                as usize
        },
        680usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(destroy_frame_buffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).create_uniform as *const _ as usize
        },
        688usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(create_uniform)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).get_uniform_info as *const _ as usize
        },
        696usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(get_uniform_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).destroy_uniform as *const _ as usize
        },
        704usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(destroy_uniform)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).create_occlusion_query as *const _
                as usize
        },
        712usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(create_occlusion_query)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_interface_vtbl>())).get_result as *const _ as usize },
        720usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(get_result)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).destroy_occlusion_query as *const _
                as usize
        },
        728usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(destroy_occlusion_query)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).set_palette_color as *const _ as usize
        },
        736usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(set_palette_color)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).set_palette_color_rgba8 as *const _
                as usize
        },
        744usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(set_palette_color_rgba8)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).set_view_name as *const _ as usize
        },
        752usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(set_view_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).set_view_rect as *const _ as usize
        },
        760usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(set_view_rect)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).set_view_rect_ratio as *const _ as usize
        },
        768usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(set_view_rect_ratio)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).set_view_scissor as *const _ as usize
        },
        776usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(set_view_scissor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).set_view_clear as *const _ as usize
        },
        784usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(set_view_clear)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).set_view_clear_mrt as *const _ as usize
        },
        792usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(set_view_clear_mrt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).set_view_mode as *const _ as usize
        },
        800usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(set_view_mode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).set_view_frame_buffer as *const _
                as usize
        },
        808usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(set_view_frame_buffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).set_view_transform as *const _ as usize
        },
        816usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(set_view_transform)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).set_view_order as *const _ as usize
        },
        824usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(set_view_order)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).encoder_begin as *const _ as usize
        },
        832usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(encoder_begin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_interface_vtbl>())).encoder_end as *const _ as usize },
        840usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(encoder_end)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).encoder_set_marker as *const _ as usize
        },
        848usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(encoder_set_marker)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).encoder_set_state as *const _ as usize
        },
        856usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(encoder_set_state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).encoder_set_condition as *const _
                as usize
        },
        864usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(encoder_set_condition)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).encoder_set_stencil as *const _ as usize
        },
        872usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(encoder_set_stencil)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).encoder_set_scissor as *const _ as usize
        },
        880usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(encoder_set_scissor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).encoder_set_scissor_cached as *const _
                as usize
        },
        888usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(encoder_set_scissor_cached)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).encoder_set_transform as *const _
                as usize
        },
        896usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(encoder_set_transform)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).encoder_set_transform_cached as *const _
                as usize
        },
        904usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(encoder_set_transform_cached)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).encoder_alloc_transform as *const _
                as usize
        },
        912usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(encoder_alloc_transform)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).encoder_set_uniform as *const _ as usize
        },
        920usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(encoder_set_uniform)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).encoder_set_index_buffer as *const _
                as usize
        },
        928usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(encoder_set_index_buffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).encoder_set_dynamic_index_buffer
                as *const _ as usize
        },
        936usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(encoder_set_dynamic_index_buffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).encoder_set_transient_index_buffer
                as *const _ as usize
        },
        944usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(encoder_set_transient_index_buffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).encoder_set_vertex_buffer as *const _
                as usize
        },
        952usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(encoder_set_vertex_buffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).encoder_set_dynamic_vertex_buffer
                as *const _ as usize
        },
        960usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(encoder_set_dynamic_vertex_buffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).encoder_set_transient_vertex_buffer
                as *const _ as usize
        },
        968usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(encoder_set_transient_vertex_buffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).encoder_set_vertex_count as *const _
                as usize
        },
        976usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(encoder_set_vertex_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).encoder_set_instance_data_buffer
                as *const _ as usize
        },
        984usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(encoder_set_instance_data_buffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>()))
                .encoder_set_instance_data_from_vertex_buffer as *const _ as usize
        },
        992usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(encoder_set_instance_data_from_vertex_buffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>()))
                .encoder_set_instance_data_from_dynamic_vertex_buffer as *const _
                as usize
        },
        1000usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(encoder_set_instance_data_from_dynamic_vertex_buffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).encoder_set_instance_count as *const _
                as usize
        },
        1008usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(encoder_set_instance_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).encoder_set_texture as *const _ as usize
        },
        1016usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(encoder_set_texture)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).encoder_touch as *const _ as usize
        },
        1024usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(encoder_touch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).encoder_submit as *const _ as usize
        },
        1032usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(encoder_submit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).encoder_submit_occlusion_query
                as *const _ as usize
        },
        1040usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(encoder_submit_occlusion_query)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).encoder_submit_indirect as *const _
                as usize
        },
        1048usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(encoder_submit_indirect)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).encoder_set_compute_index_buffer
                as *const _ as usize
        },
        1056usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(encoder_set_compute_index_buffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).encoder_set_compute_vertex_buffer
                as *const _ as usize
        },
        1064usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(encoder_set_compute_vertex_buffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).encoder_set_compute_dynamic_index_buffer
                as *const _ as usize
        },
        1072usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(encoder_set_compute_dynamic_index_buffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>()))
                .encoder_set_compute_dynamic_vertex_buffer as *const _ as usize
        },
        1080usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(encoder_set_compute_dynamic_vertex_buffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).encoder_set_compute_indirect_buffer
                as *const _ as usize
        },
        1088usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(encoder_set_compute_indirect_buffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).encoder_set_image as *const _ as usize
        },
        1096usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(encoder_set_image)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).encoder_dispatch as *const _ as usize
        },
        1104usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(encoder_dispatch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).encoder_dispatch_indirect as *const _
                as usize
        },
        1112usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(encoder_dispatch_indirect)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).encoder_discard as *const _ as usize
        },
        1120usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(encoder_discard)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).encoder_blit as *const _ as usize
        },
        1128usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(encoder_blit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).request_screen_shot as *const _ as usize
        },
        1136usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(request_screen_shot)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).render_frame as *const _ as usize
        },
        1144usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(render_frame)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).set_platform_data as *const _ as usize
        },
        1152usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(set_platform_data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).get_internal_data as *const _ as usize
        },
        1160usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(get_internal_data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).override_internal_texture_ptr
                as *const _ as usize
        },
        1168usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(override_internal_texture_ptr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).override_internal_texture as *const _
                as usize
        },
        1176usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(override_internal_texture)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_interface_vtbl>())).set_marker as *const _ as usize },
        1184usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(set_marker)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_interface_vtbl>())).set_state as *const _ as usize },
        1192usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(set_state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).set_condition as *const _ as usize
        },
        1200usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(set_condition)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_interface_vtbl>())).set_stencil as *const _ as usize },
        1208usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(set_stencil)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_interface_vtbl>())).set_scissor as *const _ as usize },
        1216usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(set_scissor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).set_scissor_cached as *const _ as usize
        },
        1224usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(set_scissor_cached)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).set_transform as *const _ as usize
        },
        1232usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(set_transform)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).set_transform_cached as *const _
                as usize
        },
        1240usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(set_transform_cached)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).alloc_transform as *const _ as usize
        },
        1248usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(alloc_transform)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_interface_vtbl>())).set_uniform as *const _ as usize },
        1256usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(set_uniform)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).set_index_buffer as *const _ as usize
        },
        1264usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(set_index_buffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).set_dynamic_index_buffer as *const _
                as usize
        },
        1272usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(set_dynamic_index_buffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).set_transient_index_buffer as *const _
                as usize
        },
        1280usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(set_transient_index_buffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).set_vertex_buffer as *const _ as usize
        },
        1288usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(set_vertex_buffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).set_dynamic_vertex_buffer as *const _
                as usize
        },
        1296usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(set_dynamic_vertex_buffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).set_transient_vertex_buffer as *const _
                as usize
        },
        1304usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(set_transient_vertex_buffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).set_vertex_count as *const _ as usize
        },
        1312usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(set_vertex_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).set_instance_data_buffer as *const _
                as usize
        },
        1320usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(set_instance_data_buffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).set_instance_data_from_vertex_buffer
                as *const _ as usize
        },
        1328usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(set_instance_data_from_vertex_buffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>()))
                .set_instance_data_from_dynamic_vertex_buffer as *const _ as usize
        },
        1336usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(set_instance_data_from_dynamic_vertex_buffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).set_instance_count as *const _ as usize
        },
        1344usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(set_instance_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_interface_vtbl>())).set_texture as *const _ as usize },
        1352usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(set_texture)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_interface_vtbl>())).touch as *const _ as usize },
        1360usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(touch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_interface_vtbl>())).submit as *const _ as usize },
        1368usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(submit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).submit_occlusion_query as *const _
                as usize
        },
        1376usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(submit_occlusion_query)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).submit_indirect as *const _ as usize
        },
        1384usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(submit_indirect)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).set_compute_index_buffer as *const _
                as usize
        },
        1392usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(set_compute_index_buffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).set_compute_vertex_buffer as *const _
                as usize
        },
        1400usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(set_compute_vertex_buffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).set_compute_dynamic_index_buffer
                as *const _ as usize
        },
        1408usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(set_compute_dynamic_index_buffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).set_compute_dynamic_vertex_buffer
                as *const _ as usize
        },
        1416usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(set_compute_dynamic_vertex_buffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).set_compute_indirect_buffer as *const _
                as usize
        },
        1424usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(set_compute_indirect_buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_interface_vtbl>())).set_image as *const _ as usize },
        1432usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(set_image)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_interface_vtbl>())).dispatch as *const _ as usize },
        1440usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(dispatch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<bgfx_interface_vtbl>())).dispatch_indirect as *const _ as usize
        },
        1448usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(dispatch_indirect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_interface_vtbl>())).discard as *const _ as usize },
        1456usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(discard)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bgfx_interface_vtbl>())).blit as *const _ as usize },
        1464usize,
        concat!(
            "Offset of field: ",
            stringify!(bgfx_interface_vtbl),
            "::",
            stringify!(blit)
        )
    );
}
extern "C" {
    pub fn bgfx_get_interface(_version: u32) -> *mut bgfx_interface_vtbl_t;
}
